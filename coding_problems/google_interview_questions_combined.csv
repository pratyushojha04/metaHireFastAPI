"id","question","tc1","tc2","tc3","tc4","tc5","company","difficulty","category","hint"
"1","Two Sum","nums=[2,7,11,15], target=9, output=[0,1]","nums=[3,2,4], target=6, output=[1,2]","nums=[3,3], target=6, output=[0,1]","nums=[1,2,3,4], target=7, output=[2,3]","nums=[0,4,3,0], target=0, output=[0,3]","Google, Amazon, Facebook, Microsoft, Apple","Easy","Array, Hash Table","Use a hash map to store numbers and their indices."
"3","Longest Substring Without Repeating Characters","s='abcabcbb', output=3","s='bbbbb', output=1","s='pwwkew', output=3","s='', output=0","s='dvdf', output=3","Google, Amazon, Facebook, Microsoft","Medium","String, Sliding Window","Use a sliding window with a hash set to track unique characters."
"4","Median of Two Sorted Arrays","nums1=[1,3], nums2=[2], output=2.0","nums1=[1,2], nums2=[3,4], output=2.5","nums1=[0,0], nums2=[0,0], output=0.0","nums1=[], nums2=[1], output=1.0","nums1=[2], nums2=[], output=2.0","Google, Amazon, Microsoft","Hard","Array, Binary Search, Divide and Conquer","Use binary search to partition arrays."
"5","Longest Palindromic Substring","s='babad', output='bab'","s='cbbd', output='bb'","s='a', output='a'","s='racecar', output='racecar'","s='aaaa', output='aaaa'","Google, Amazon, Facebook","Medium","String, Dynamic Programming","Expand around the center to find palindromes."
"6","ZigZag Conversion","s='PAYPALISHIRING', numRows=3, output='PAHNAPLSIIGYIR'","s='PAYPALISHIRING', numRows=4, output='PINALSIGYAHRPI'","s='A', numRows=1, output='A'","s='AB', numRows=2, output='AB'","s='ABC', numRows=3, output='ABC'","Google, Amazon","Medium","String","Simulate zigzag by tracking row indices."
"8","String to Integer (atoi)","s='42', output=42","s='-42', output=-42","s='4193 with words', output=4193","s='words and 987', output=0","s='-91283472332', output=-2147483648","Google, Amazon, Microsoft","Medium","String","Handle signs, whitespace, and overflow."
"11","Container With Most Water","height=[1,8,6,2,5,4,8,3,7], output=49","height=[1,1], output=1","height=[4,3,2,1,4], output=16","height=[1,2,1], output=2","height=[2,3,4,5], output=6","Google, Amazon, Facebook","Medium","Array, Two Pointers","Use two pointers to maximize area."
"15","3Sum","nums=[-1,0,1,2,-1,-4], output=[[-1,-1,2],[-1,0,1]]","nums=[0,0,0], output=[[0,0,0]]","nums=[1,2,3,4], output=[]","nums=[-2,0,1,1], output=[[-2,0,2]]","nums=[-1,0,1], output=[[-1,0,1]]","Google, Amazon, Facebook","Medium","Array, Two Pointers","Sort and use two pointers to find triplets."
"17","Letter Combinations of a Phone Number","digits='23', output=['ad','ae','af','bd','be','bf','cd','ce','cf']","digits='', output=[]","digits='2', output=['a','b','c']","digits='7', output=['p','q','r','s']","digits='89', output=['tw','tx','ty','tz','uw','ux','uy','uz','vw','vx','vy','vz']","Google, Amazon","Medium","Backtracking","Use backtracking to generate all combinations."
"19","Remove Nth Node From End of List","head=[1,2,3,4,5], n=2, output=[1,2,3,5]","head=[1], n=1, output=[]","head=[1,2], n=1, output=[1]","head=[1,2,3], n=3, output=[2,3]","head=[1,2,3,4], n=1, output=[1,2,3]","Google, Amazon, Facebook","Medium","Linked List, Two Pointers","Use two pointers to find the nth node from the end."
"20","Valid Parentheses","s='()', output=true","s='()[]{}', output=true","s='(]', output=false","s='([)]', output=false","s='{[]}', output=true","Google, Amazon, Facebook","Easy","String, Stack","Use a stack to match opening and closing brackets."
"21","Merge Two Sorted Lists","list1=[1,2,4], list2=[1,3,4], output=[1,1,2,3,4,4]","list1=[], list2=[0], output=[0]","list1=[1], list2=[], output=[1]","list1=[1,2], list2=[3], output=[1,2,3]","list1=[2], list2=[1], output=[1,2]","Google, Amazon","Easy","Linked List","Merge lists by comparing node values."
"22","Generate Parentheses","n=3, output=['((()))','(()())','(())()','()(()','()()()']","n=1, output=['()']","n=2, output=['(())','()()']","n=4, output=(14 valid combinations)","n=0, output=[]","Google, Amazon","Medium","Backtracking","Use backtracking to generate valid parentheses."
"23","Merge k Sorted Lists","lists=[[1,4,5],[1,3,4],[2,6]], output=[1,1,2,3,4,4,5,6]","lists=[], output=[]","lists=[[]], output=[]","lists=[[1]], output=[1]","lists=[[1,2],[3,4]], output=[1,2,3,4]","Google, Amazon, Facebook, Microsoft","Hard","Linked List, Divide and Conquer, Heap","Use a min-heap to merge lists efficiently."
"24","Swap Nodes in Pairs","head=[1,2,3,4], output=[2,1,4,3]","head=[1], output=[1]","head=[1,2], output=[2,1]","head=[1,2,3], output=[2,1,3]","head=[1,2,3,4,5], output=[2,1,4,3,5]","Google, Amazon","Medium","Linked List","Swap adjacent nodes by adjusting pointers."
"26","Remove Duplicates from Sorted Array","nums=[1,1,2], output=2","nums=[0,0,1,1,1,2,2,3,3,4], output=5","nums=[1], output=1","nums=[1,1,1], output=1","nums=[1,2,3], output=3","Google, Amazon, Microsoft","Easy","Array, Two Pointers","Use two pointers to keep unique elements."
"28","Find the Index of the First Occurrence in a String","haystack='sadbutsad', needle='sad', output=0","haystack='leetcode', needle='leeto', output=-1","haystack='hello', needle='ll', output=2","haystack='aaaaa', needle='bba', output=-1","haystack='abc', needle='c', output=2","Google, Amazon","Easy","String","Use string matching or KMP algorithm."
"29","Divide Two Integers","dividend=10, divisor=3, output=3","dividend=7, divisor=-3, output=-2","dividend=0, divisor=1, output=0","dividend=1, divisor=1, output=1","dividend=-2147483648, divisor=-1, output=2147483647","Google, Amazon","Medium","Math, Bit Manipulation","Use bit manipulation for division without using / or %."
"31","Next Permutation","nums=[1,2,3], output=[1,3,2]","nums=[3,2,1], output=[1,2,3]","nums=[1,1,5], output=[1,5,1]","nums=[1], output=[1]","nums=[1,2], output=[2,1]","Google, Amazon","Medium","Array","Find the next lexicographically greater permutation."
"33","Search in Rotated Sorted Array","nums=[4,5,6,7,0,1,2], target=0, output=4","nums=[4,5,6,7,0,1,2], target=3, output=-1","nums=[1], target=0, output=-1","nums=[1,3], target=3, output=1","nums=[5,1,3], target=3, output=2","Google, Amazon, Facebook","Medium","Array, Binary Search","Use modified binary search for rotated array."
"34","Find First and Last Position of Element in Sorted Array","nums=[5,7,7,8,8,10], target=8, output=[3,4]","nums=[5,7,7,8,8,10], target=6, output=[-1,-1]","nums=[], target=0, output=[-1,-1]","nums=[1], target=1, output=[0,0]","nums=[2,2], target=2, output=[0,1]","Google, Amazon, Microsoft","Medium","Array, Binary Search","Use two binary searches for boundaries."
"35","Search Insert Position","nums=[1,3,5,6], target=5, output=2","nums=[1,3,5,6], target=2, output=1","nums=[1,3,5,6], target=7, output=4","nums=[1,3,5,6], target=0, output=0","nums=[1], target=1, output=0","Google, Amazon","Easy","Array, Binary Search","Use binary search to find insertion point."
"36","Valid Sudoku","board=[['5','3','.','.','7','.','.','.','.'],['6','.','.','1','9','5','.','.','.'],['.','9','8','.','.','.','.','6','.'],['8','.','.','.','6','.','.','.','3'],['4','.','.','8','.','3','.','.','1'],['7','.','.','.','2','.','.','.','6'],['.','6','.','.','.','.','2','8','.'],['.','.','.','4','1','9','.','.','5'],['.','.','.','.','8','.','.','7','9']], output=true","board=[['8','3','.','.','7','.','.','.','.'],['6','.','.','1','9','5','.','.','.'],['.','9','8','.','.','.','.','6','.'],['8','.','.','.','6','.','.','.','3'],['4','.','.','8','.','3','.','.','1'],['7','.','.','.','2','.','.','.','6'],['.','6','.','.','.','.','2','8','.'],['.','.','.','4','1','9','.','.','5'],['.','.','.','.','8','.','.','7','9']], output=false","board=[['1','.','.'],['.','2','.'],['.','.','3']], output=true","board=[['1','1','.'],['.','2','.'],['.','.','3']], output=false","board=[['.','.','.'],['.','.','.'],['.','.','.']], output=true","Google, Amazon","Medium","Array, Hash Table","Check rows, columns, and 3x3 sub-boxes for duplicates."
"38","Count and Say","n=1, output='1'","n=2, output='11'","n=3, output='21'","n=4, output='1211'","n=5, output='111221'","Google, Amazon","Medium","String","Count consecutive digits to generate the next sequence."
"39","Combination Sum","candidates=[2,3,6,7], target=7, output=[[2,2,3],[7]]","candidates=[2,3,5], target=8, output=[[2,2,2,2],[2,3,3],[3,5]]","candidates=[2], target=1, output=[]","candidates=[1], target=1, output=[[1]]","candidates=[1,2], target=4, output=[[1,1,1,1],[1,1,2],[2,2]]","Google, Amazon","Medium","Backtracking","Use backtracking to find all combinations summing to target."
"40","Combination Sum II","candidates=[10,1,2,7,6,1,5], target=8, output=[[1,1,6],[1,2,5],[1,7],[2,6]]","candidates=[2,5,2,1,2], target=5, output=[[1,2,2],[5]]","candidates=[1], target=1, output=[[1]]","candidates=[1,2], target=4, output=[[2,2]]","candidates=[2], target=1, output=[]","Google, Amazon","Medium","Backtracking","Use backtracking with deduplication for unique combinations."
"41","First Missing Positive","nums=[1,2,0], output=3","nums=[3,4,-1,1], output=2","nums=[7,8,9,11,12], output=1","nums=[1], output=2","nums=[1,2,3], output=4","Google, Amazon, Microsoft","Hard","Array","Use array as a hash table by marking indices."
"42","Trapping Rain Water","height=[0,1,0,2,1,0,1,3,2,1,2,1], output=6","height=[4,2,0,3,2,5], output=9","height=[1], output=0","height=[1,2], output=0","height=[2,0,2], output=2","Google, Amazon","Hard","Array, Two Pointers, Stack","Use two pointers or stack to compute trapped water."
"43","Multiply Strings","num1='2', num2='3', output='6'","num1='123', num2='456', output='56088'","num1='0', num2='0', output='0'","num1='9', num2='9', output='81'","num1='123', num2='0', output='0'","Google, Amazon","Medium","String, Math","Simulate multiplication digit by digit."
"44","Wildcard Matching","s='aa', p='a', output=false","s='aa', p='*', output=true","s='cb', p='?a', output=false","s='adceb', p='*a*b', output=true","s='acdcb', p='a*c?b', output=false","Google, Amazon","Hard","Dynamic Programming, String","Use DP to match string with wildcard pattern."
"45","Jump Game II","nums=[2,3,1,1,4], output=2","nums=[2,3,0,1,4], output=2","nums=[1], output=0","nums=[1,2], output=1","nums=[2,1], output=1","Google, Amazon","Medium","Array, Greedy","Use greedy approach to minimize jumps."
"46","Permutations","nums=[1,2,3], output=[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]","nums=[0,1], output=[[0,1],[1,0]]","nums=[1], output=[[1]]","nums=[1,2], output=[[1,2],[2,1]]","nums=[1,2,3,4], output=(24 permutations)","Google, Amazon, Facebook","Medium","Backtracking","Use backtracking to generate all permutations."
"48","Rotate Image","matrix=[[1,2,3],[4,5,6],[7,8,9]], output=[[7,4,1],[8,5,2],[9,6,3]]","matrix=[[1]], output=[[1]]","matrix=[[1,2],[3,4]], output=[[3,1],[4,2]]","matrix=[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], output=[[13,9,5,1],[14,10,6,2],[15,11,7,3],[16,12,8,4]]","matrix=[[1,2],[3,4]], output=[[3,1],[4,2]]","Google, Amazon","Medium","Array, Matrix","Rotate matrix in-place using transpose and reverse."
"49","Group Anagrams","strs=['eat','tea','tan','ate','nat','bat'], output=[['eat','tea','ate'],['tan','nat'],['bat']]","strs=[''], output=[['']]","strs=['a'], output=[['a']]","strs=['ab','ba'], output=[['ab','ba']]","strs=['abc','cba','bac'], output=[['abc','cba','bac']]","Google, Amazon","Medium","String, Hash Table","Group strings by sorted characters or character frequency."
"53","Maximum Subarray","nums=[-2,1,-3,4,-1,2,1,-5,4], output=6","nums=[1], output=1","nums=[-1], output=-1","nums=[-2,-1], output=-1","nums=[1,2,3], output=6","Google, Amazon, Facebook","Easy","Array, Dynamic Programming","Use Kadane’s algorithm to find the maximum subarray sum."
"54","Spiral Matrix","matrix=[[1,2,3],[4,5,6],[7,8,9]], output=[1,2,3,6,9,8,7,4,5]","matrix=[[1,2,3,4],[5,6,7,8],[9,10,11,12]], output=[1,2,3,4,8,12,11,10,9,5,6,7]","matrix=[[1]], output=[1]","matrix=[[1,2],[3,4]], output=[1,2,4,3]","matrix=[[1,2,3]], output=[1,2,3]","Google, Amazon, Microsoft","Medium","Array, Matrix","Use four pointers to traverse the matrix in spiral order."
"55","Jump Game","nums=[2,3,1,1,4], output=true","nums=[3,2,1,0,4], output=false","nums=[1], output=true","nums=[0], output=true","nums=[2,0], output=true","Google, Amazon","Medium","Array, Greedy","Track the maximum reachable index using a greedy approach."
"56","Merge Intervals","intervals=[[1,3],[2,6],[8,10],[15,18]], output=[[1,6],[8,10],[15,18]]","intervals=[[1,4],[4,5]], output=[[1,5]]","intervals=[[1,4]], output=[[1,4]]","intervals=[[1,4],[0,4]], output=[[0,4]]","intervals=[[1,4],[2,3]], output=[[1,4]]","Google, Amazon, Facebook","Medium","Array, Sorting","Sort intervals by start time and merge overlapping ones."
"57","Insert Interval","intervals=[[1,3],[6,9]], newInterval=[2,5], output=[[1,5],[6,9]]","intervals=[[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval=[4,8], output=[[1,2],[3,10],[12,16]]","intervals=[], newInterval=[5,7], output=[[5,7]]","intervals=[[1,5]], newInterval=[2,3], output=[[1,5]]","intervals=[[1,5]], newInterval=[6,8], output=[[1,5],[6,8]]","Google, Amazon","Medium","Array, Intervals","Insert and merge the new interval with existing ones."
"59","Spiral Matrix II","n=3, output=[[1,2,3],[8,9,4],[7,6,5]]","n=1, output=[[1]]","n=2, output=[[1,2],[4,3]]","n=4, output=[[1,2,3,4],[12,13,14,5],[11,16,15,6],[10,9,8,7]]","n=0, output=[]","Google, Amazon","Medium","Array, Matrix","Fill the matrix in a spiral pattern using four pointers."
"60","Permutation Sequence","n=3, k=3, output='213'","n=4, k=9, output='2314'","n=1, k=1, output='1'","n=2, k=1, output='12'","n=2, k=2, output='21'","Google, Amazon","Hard","Math, Backtracking","Use factorial-based indexing to find the k-th permutation."
"61","Rotate List","head=[1,2,3,4,5], k=2, output=[4,5,1,2,3]","head=[0,1,2], k=4, output=[2,0,1]","head=[1], k=0, output=[1]","head=[1,2], k=1, output=[2,1]","head=[1,2,3], k=3, output=[1,2,3]","Google, Amazon","Medium","Linked List","Rotate the list by finding the new head after k nodes."
"62","Unique Paths","m=3, n=7, output=28","m=3, n=2, output=3","m=1, n=1, output=1","m=2, n=2, output=2","m=3, n=3, output=6","Google, Amazon","Medium","Dynamic Programming","Use DP to count paths from top-left to bottom-right."
"63","Unique Paths II","obstacleGrid=[[0,0,0],[0,1,0],[0,0,0]], output=2","obstacleGrid=[[0,1],[0,0]], output=1","obstacleGrid=[[0]], output=1","obstacleGrid=[[1]], output=0","obstacleGrid=[[0,0],[1,1],[0,0]], output=0","Google, Amazon","Medium","Dynamic Programming","Use DP with obstacles blocking paths."
"64","Minimum Path Sum","grid=[[1,3,1],[1,5,1],[4,2,1]], output=7","grid=[[1,2],[1,1]], output=3","grid=[[1]], output=1","grid=[[1,2,3]], output=6","grid=[[1],[2],[3]], output=6","Google, Amazon","Medium","Dynamic Programming","Use DP to find the minimum path sum."
"66","Plus One","digits=[1,2,3], output=[1,2,4]","digits=[4,3,2,1], output=[4,3,2,2]","digits=[0], output=[1]","digits=[9], output=[1,0]","digits=[9,9], output=[1,0,0]","Google, Amazon","Easy","Array, Math","Handle carry-over from right to left."
"67","Add Binary","a='11', b='1', output='100'","a='1010', b='1011', output='10101'","a='0', b='0', output='0'","a='1', b='0', output='1'","a='1111', b='1111', output='11110'","Google, Amazon","Easy","String, Bit Manipulation","Simulate binary addition digit by digit."
"69","Sqrt(x)","x=4, output=2","x=8, output=2","x=0, output=0","x=1, output=1","x=16, output=4","Google, Amazon","Easy","Math, Binary Search","Use binary search to find the square root."
"70","Climbing Stairs","n=2, output=2","n=3, output=3","n=1, output=1","n=4, output=5","n=0, output=1","Google, Amazon","Easy","Dynamic Programming","Use DP to compute ways to climb stairs."
"71","Simplify Path","path='/home/', output='/home'","path='/../', output='/'","path='/home//foo/', output='/home/foo'","path='/a/./b/../../c/', output='/c'","path='/a//b////c/d//././/..', output='/a/b/c'","Google, Amazon","Medium","String, Stack","Use a stack to process path components."
"72","Edit Distance","word1='horse', word2='ros', output=3","word1='intention', word2='execution', output=5","word1='', word2='a', output=1","word1='abc', word2='abc', output=0","word1='cat', word2='cut', output=1","Google, Amazon","Hard","Dynamic Programming","Use a DP table for minimum operations."
"73","Set Matrix Zeroes","matrix=[[1,1,1],[1,0,1],[1,1,1]], output=[[1,0,1],[0,0,0],[1,0,1]]","matrix=[[0,1,2,0],[3,4,5,2],[1,3,1,5]], output=[[0,0,0,0],[0,4,5,0],[0,3,1,0]]","matrix=[[1]], output=[[1]]","matrix=[[0]], output=[[0]]","matrix=[[1,0],[0,1]], output=[[0,0],[0,0]]","Google, Amazon","Medium","Array, Matrix","Use first row and column as markers for zeroes."
"74","Search a 2D Matrix","matrix=[[1,3,5,7],[10,11,16,20],[23,30,34,50]], target=3, output=true","matrix=[[1,3,5,7],[10,11,16,20],[23,30,34,50]], target=13, output=false","matrix=[[1]], target=1, output=true","matrix=[[1,2]], target=2, output=true","matrix=[[1],[3]], target=3, output=true","Google, Amazon, Microsoft","Medium","Array, Binary Search","Treat matrix as a sorted array for binary search."
"75","Sort Colors","nums=[2,0,2,1,1,0], output=[0,0,1,1,2,2]","nums=[2,0,1], output=[0,1,2]","nums=[0], output=[0]","nums=[1], output=[1]","nums=[2,2,0,0,1,1], output=[0,0,1,1,2,2]","Google, Amazon, Facebook","Medium","Array, Two Pointers, Sorting","Use three pointers to partition colors."
"76","Minimum Window Substring","s='ADOBECODEBANC', t='ABC', output='BANC'","s='a', t='a', output='a'","s='a', t='aa', output=''","s='ab', t='a', output='a'","s='ADOBEC', t='ABC', output='BEC'","Google, Amazon, Facebook","Hard","String, Sliding Window","Use a sliding window to find the smallest substring containing all characters."
"77","Combinations","n=4, k=2, output=[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]","n=1, k=1, output=[[1]]","n=2, k=1, output=[[1],[2]]","n=2, k=2, output=[[1,2]]","n=3, k=2, output=[[1,2],[1,3],[2,3]]","Google, Amazon","Medium","Backtracking","Use backtracking to generate all combinations."
"78","Subsets","nums=[1,2,3], output=[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]","nums=[0], output=[[],[0]]","nums=[1,2], output=[[],[1],[2],[1,2]]","nums=[1], output=[[],[1]]","nums=[2,3], output=[[],[2],[3],[2,3]]","Google, Amazon, Facebook","Medium","Backtracking, Bit Manipulation","Use backtracking or bit manipulation for all subsets."
"79","Word Search","board=[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word='ABCCED', output=true","board=[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word='SEE', output=true","board=[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word='ABCB', output=false","board=[['A']], word='A', output=true","board=[['A','B']], word='AB', output=true","Google, Amazon, Microsoft","Medium","Backtracking, Matrix","Use DFS with backtracking to find the word."
"80","Remove Duplicates from Sorted Array II","nums=[1,1,1,2,2,3], output=5","nums=[0,0,1,1,1,1,2,3,3], output=7","nums=[1,1], output=2","nums=[1], output=1","nums=[1,2,2], output=3","Google, Amazon","Medium","Array, Two Pointers","Allow at most two duplicates using two pointers."
"81","Search in Rotated Sorted Array II","nums=[2,5,6,0,0,1,2], target=0, output=true","nums=[2,5,6,0,0,1,2], target=3, output=false","nums=[1], target=1, output=true","nums=[1,1], target=1, output=true","nums=[1,3,1,1,1], target=3, output=true","Google, Amazon","Medium","Array, Binary Search","Handle duplicates with modified binary search."
"82","Remove Duplicates from Sorted List II","head=[1,2,3,3,4,4,5], output=[1,2,5]","head=[1,1,1,2,3], output=[2,3]","head=[1,1], output=[]","head=[1,2,2], output=[1]","head=[1], output=[1]","Google, Amazon","Medium","Linked List","Remove all nodes with duplicates using pointers."
"83","Remove Duplicates from Sorted List","head=[1,1,2], output=[1,2]","head=[1,1,2,3,3], output=[1,2,3]","head=[1], output=[1]","head=[1,1,1], output=[1]","head=[1,2], output=[1,2]","Google, Amazon","Easy","Linked List","Skip duplicates in a sorted list using a pointer."
"84","Largest Rectangle in Histogram","heights=[2,1,5,6,2,3], output=10","heights=[2,4], output=4","heights=[1], output=1","heights=[2,2], output=4","heights=[1,2,3], output=4","Google, Amazon","Hard","Array, Stack","Use a stack to compute areas of rectangles."
"85","Maximal Rectangle","matrix=[['1','0','1','0','0'],['1','0','1','1','1'],['1','1','1','1','1'],['1','0','0','1','0']], output=6","matrix=[['0']], output=0","matrix=[['1']], output=1","matrix=[['1','0'],['0','1']], output=1","matrix=[['1','1'],['1','1']], output=4","Google, Amazon","Hard","Dynamic Programming, Stack","Convert to histogram problem for each row."
"88","Merge Sorted Array","nums1=[1,2,3,0,0,0], m=3, nums2=[2,5,6], n=3, output=[1,2,2,3,5,6]","nums1=[1], m=1, nums2=[], n=0, output=[1]","nums1=[0], m=0, nums2=[1], n=1, output=[1]","nums1=[2,0], m=1, nums2=[1], n=1, output=[1,2]","nums1=[1,2,0,0], m=2, nums2=[3,4], n=2, output=[1,2,3,4]","Google, Amazon","Easy","Array, Two Pointers","Merge from the end to avoid overwriting."
"89","Gray Code","n=2, output=[0,1,3,2]","n=1, output=[0,1]","n=0, output=[0]","n=3, output=[0,1,3,2,6,7,5,4]","n=4, output=(16 numbers in Gray code sequence)","Google, Amazon","Medium","Backtracking, Bit Manipulation","Generate sequence using bit manipulation or mirroring."
"90","Subsets II","nums=[1,2,2], output=[[],[1],[1,2],[1,2,2],[2],[2,2]]","nums=[0], output=[[],[0]]","nums=[1,1], output=[[],[1],[1,1]]","nums=[1], output=[[],[1]]","nums=[2,2,2], output=[[],[2],[2,2],[2,2,2]]","Google, Amazon","Medium","Backtracking","Use backtracking with deduplication for subsets."
"91","Decode Ways","s='12', output=2","s='226', output=3","s='06', output=0","s='1', output=1","s='111', output=3","Google, Amazon","Medium","Dynamic Programming","Use DP to count valid decodings."
"92","Reverse Linked List II","head=[1,2,3,4,5], left=2, right=4, output=[1,4,3,2,5]","head=[5], left=1, right=1, output=[5]","head=[1,2], left=1, right=2, output=[2,1]","head=[1,2,3], left=1, right=3, output=[3,2,1]","head=[1,2,3,4], left=2, right=3, output=[1,3,2,4]","Google, Amazon","Medium","Linked List","Reverse the sublist between left and right positions."
"94","Binary Tree Inorder Traversal","root=[1,null,2,3], output=[1,3,2]","root=[], output=[]","root=[1], output=[1]","root=[1,2], output=[2,1]","root=[1,null,2], output=[1,2]","Google, Amazon, Microsoft","Medium","Tree, DFS","Use recursive or iterative inorder traversal."
"95","Unique Binary Search Trees II","n=3, output=[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]","n=1, output=[[1]]","n=2, output=[[1,null,2],[2,1]]","n=0, output=[]","n=4, output=(14 unique BSTs)","Google, Amazon","Medium","Dynamic Programming, Tree","Generate all unique BSTs using recursion."
"96","Unique Binary Search Trees","n=3, output=5","n=1, output=1","n=2, output=2","n=0, output=1","n=4, output=14","Google, Amazon","Medium","Dynamic Programming, Math","Use Catalan numbers or DP for unique BSTs."
"97","Interleaving String","s1='aabcc', s2='dbbca', s3='aadbbcbcac', output=true","s1='aabcc', s2='dbbca', s3='aadbbbaccc', output=false","s1='', s2='', s3='', output=true","s1='abc', s2='def', s3='adbecf', output=true","s1='a', s2='b', s3='ab', output=true","Google, Amazon","Hard","Dynamic Programming","Use DP to check if s3 is an interleaving of s1 and s2."
"98","Validate Binary Search Tree","root=[2,1,3], output=true","root=[5,1,4,null,null,3,6], output=false","root=[1], output=true","root=[5,4,null,3], output=false","root=[3,1,5], output=true","Google, Amazon, Microsoft","Medium","Tree, DFS","Check if each node’s value is within valid BST range."
"99","Recover Binary Search Tree","root=[1,3,null,null,2], output=[3,1,null,null,2]","root=[3,1,4,null,null,2], output=[2,1,4,null,null,3]","root=[1], output=[1]","root=[2,1,3], output=[2,1,3]","root=[4,2,6,1,3], output=[4,3,6,1,2]","Google, Amazon","Medium","Tree, DFS","Find and swap the two nodes that are out of order."
"100","Same Tree","p=[1,2,3], q=[1,2,3], output=true","p=[1,2], q=[1,null,2], output=false","p=[1,2,1], q=[1,1,2], output=false","p=[1], q=[1], output=true","p=[], q=[], output=true","Google, Amazon","Easy","Tree, DFS","Compare trees recursively or iteratively."
"101","Symmetric Tree","root=[1,2,2,3,4,4,3], output=true","root=[1,2,2,null,3,null,3], output=false","root=[1], output=true","root=[1,2,2], output=true","root=[1,2,3], output=false","Google, Amazon","Easy","Tree, DFS","Check if left and right subtrees are mirror images."
"102","Binary Tree Level Order Traversal","root=[3,9,20,null,null,15,7], output=[[3],[9,20],[15,7]]","root=[1], output=[[1]]","root=[], output=[]","root=[1,2,3], output=[[1],[2,3]]","root=[1,null,2], output=[[1],[2]]","Google, Amazon, Microsoft","Medium","Tree, BFS","Use BFS to traverse level by level."
"103","Binary Tree Zigzag Level Order Traversal","root=[3,9,20,null,null,15,7], output=[[3],[20,9],[15,7]]","root=[1], output=[[1]]","root=[], output=[]","root=[1,2,3], output=[[1],[3,2]]","root=[1,null,2,3], output=[[1],[2],[3]]","Google, Amazon","Medium","Tree, BFS","Use BFS with a flag to reverse alternate levels."
"104","Maximum Depth of Binary Tree","root=[3,9,20,null,null,15,7], output=3","root=[1,null,2], output=2","root=[1], output=1","root=[], output=0","root=[1,2,3,4,null,null,5], output=3","Google, Amazon","Easy","Tree, DFS","Use DFS or BFS to find the maximum depth."
"105","Construct Binary Tree from Preorder and Inorder Traversal","preorder=[3,9,20,15,7], inorder=[9,3,15,20,7], output=[3,9,20,null,null,15,7]","preorder=[1], inorder=[1], output=[1]","preorder=[1,2], inorder=[2,1], output=[1,2]","preorder=[1,2,3], inorder=[2,1,3], output=[1,2,3]","preorder=[3,1,2], inorder=[1,3,2], output=[3,1,2]","Google, Amazon","Medium","Tree, DFS","Use preorder for root and inorder to split subtrees."
"106","Construct Binary Tree from Inorder and Postorder Traversal","inorder=[9,3,15,20,7], postorder=[9,15,7,20,3], output=[i3,9,20,null,null,15,7]","inorder=[1], postorder=[1], output=[1]","inorder=[2,1], postorder=[2,1], output=[1,2]","inorder=[2,1,3], postorder=[2,3,1], output=[1,2,3]","inorder=[1,3,2], postorder=[1,2,3], output=[3,1,2]","Google, Amazon","Medium","Tree, DFS","Use postorder for root and inorder to split subtrees."
"107","Binary Tree Level Order Traversal II","root=[3,9,20,null,null,15,7], output=[[15,7],[9,20],[3]]","root=[1], output=[[1]]","root=[], output=[]","root=[1,2,3], output=[[2,3],[1]]","root=[1,null,2], output=[[2],[1]]","Google, Amazon","Medium","Tree, BFS","Use BFS and reverse the result."
"108","Convert Sorted Array to Binary Search Tree","nums=[-10,-3,0,5,9], output=[0,-3,9,-10,null,5]","nums=[1,3], output=[3,1]","nums=[1], output=[1]","nums=[1,2,3], output=[2,1,3]","nums=[0], output=[0]","Google, Amazon","Easy","Tree, DFS","Use middle element as root to balance the BST."
"109","Convert Sorted List to Binary Search Tree","head=[-10,-3,0,5,9], output=[0,-3,9,-10,null,5]","head=[], output=[]","head=[0], output=[0]","head=[1,3], output=[3,1]","head=[1,2,3], output=[2,1,3]","Google, Amazon","Medium","Linked List, Tree","Find the middle of the list for the root."
"110","Balanced Binary Tree","root=[3,9,20,null,null,15,7], output=true","root=[1,2,2,3,3,null,null,4,4], output=false","root=[1], output=true","root=[1,2], output=true","root=[1,null,2], output=true","Google, Amazon","Easy","Tree, DFS","Check if subtree height difference is at most 1."
"111","Minimum Depth of Binary Tree","root=[3,9,20,null,null,15,7], output=2","root=[2,null,3,null,4,null,5,null,6], output=5","root=[1], output=1","root=[1,2], output=2","root=[1,null,2], output=2","Google, Amazon","Easy","Tree, DFS, BFS","Use BFS for the shortest path to a leaf."
"112","Path Sum","root=[5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum=22, output=true","root=[1,2,3], targetSum=5, output=false","root=[1], targetSum=1, output=true","root=[1,2], targetSum=3, output=true","root=[], targetSum=0, output=false","Google, Amazon","Easy","Tree, DFS","Check if any root-to-leaf path sums to target."
"113","Path Sum II","root=[5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum=22, output=[[5,4,11,2],[5,8,4,5]]","root=[1,2,3], targetSum=5, output=[]","root=[1], targetSum=1, output=[[1]]","root=[1,2], targetSum=3, output=[[1,2]]","root=[1,null,2], targetSum=3, output=[[1,2]]","Google, Amazon","Medium","Tree, DFS","Use DFS to collect all paths summing to target."
"114","Flatten Binary Tree to Linked List","root=[1,2,5,3,4,null,6], output=[1,null,2,null,3,null,4,null,5,null,6]","root=[1], output=[1]","root=[], output=[]","root=[1,2], output=[1,null,2]","root=[1,null,2], output=[1,null,2]","Google, Amazon","Medium","Tree, DFS","Flatten the tree in-place using preorder traversal."
"116","Populating Next Right Pointers in Each Node","root=[1,2,3,4,5,6,7], output=[1,#,2,3,#,4,5,6,7,#]","root=[1], output=[1,#]","root=[], output=[]","root=[1,2,3], output=[1,#,2,3,#]","root=[1,null,2], output=[1,#,2,#]","Google, Amazon","Medium","Tree, BFS","Connect nodes at the same level using next pointers."
"117","Populating Next Right Pointers in Each Node II","root=[1,2,3,4,5,null,7], output=[1,#,2,3,#,4,5,7,#]","root=[1], output=[1,#]","root=[], output=[]","root=[1,2,3], output=[1,#,2,3,#]","root=[1,null,2], output=[1,#,2,#]","Google, Amazon","Medium","Tree, BFS","Connect nodes at the same level in a non-perfect tree."
"118","Pascal's Triangle","numRows=5, output=[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]","numRows=1, output=[[1]]","numRows=2, output=[[1],[1,1]]","numRows=3, output=[[1],[1,1],[1,2,1]]","numRows=0, output=[]","Google, Amazon","Easy","Array","Generate rows using previous row’s values."
"119","Pascal's Triangle II","rowIndex=3, output=[1,3,3,1]","rowIndex=0, output=[1]","rowIndex=1, output=[1,1]","rowIndex=2, output=[1,2,1]","rowIndex=4, output=[1,4,6,4,1]","Google, Amazon","Easy","Array","Compute the kth row using only O(k) space."
"120","Triangle","triangle=[[2],[3,4],[6,5,7],[4,1,8,3]], output=11","triangle=[[1]], output=1","triangle=[[1],[2,3]], output=3","triangle=[[1],[2,3],[4,5,6]], output=8","triangle=[[-10]], output=-10","Google, Amazon","Medium","Dynamic Programming","Use DP to find the minimum path sum."
"121","Best Time to Buy and Sell Stock","prices=[7,1,5,3,6,4], output=5","prices=[7,6,4,3,1], output=0","prices=[1], output=0","prices=[1,2], output=1","prices=[2,1,4], output=3","Google, Amazon, Facebook","Easy","Array, Dynamic Programming","Track minimum price and maximum profit."
"122","Best Time to Buy and Sell Stock II","prices=[7,1,5,3,6,4], output=7","prices=[1,2,3,4,5], output=4","prices=[7,6,4,3,1], output=0","prices=[1], output=0","prices=[2,1,2,0,1], output=2","Google, Amazon","Medium","Array, Greedy","Sum all positive price differences."
"124","Binary Tree Maximum Path Sum","root=[1,2,3], output=6","root=[-10,9,20,null,null,15,7], output=42","root=[1], output=1","root=[-1,-2,-3], output=-1","root=[2,-1], output=2","Google, Amazon","Hard","Tree, DFS","Track maximum path sum through each node."
"125","Valid Palindrome","s='A man, a plan, a canal: Panama', output=true","s='race a car', output=false","s=' ', output=true","s='ab', output=false","s='a', output=true","Google, Amazon","Easy","String, Two Pointers","Ignore non-alphanumeric characters and compare."
"126","Word Ladder II","beginWord='hit', endWord='cog', wordList=['hot','dot','dog','lot','log','cog'], output=[['hit','hot','dot','dog','cog'],['hit','hot','lot','log','cog']]","beginWord='hit', endWord='cog', wordList=['hot','dot','dog'], output=[]","beginWord='a', endWord='c', wordList=['a','b','c'], output=[['a','b','c']]","beginWord='red', endWord='tax', wordList=['ted','tex','red','tax'], output=[['red','ted','tex','tax']]","beginWord='hot', endWord='dog', wordList=['hot','dog'], output=[]","Google, Amazon","Hard","BFS, Backtracking","Use BFS to find shortest paths and backtrack for all paths."
"127","Word Ladder","beginWord='hit', endWord='cog', wordList=['hot','dot','dog','lot','log','cog'], output=5","beginWord='hit', endWord='cog', wordList=['hot','dot','dog'], output=0","beginWord='a', endWord='c', wordList=['a','b','c'], output=3","beginWord='red', endWord='tax', wordList=['ted','tex','red','tax'], output=4","beginWord='hot', endWord='dog', wordList=['hot','dog'], output=0","Google, Amazon","Hard","BFS","Use BFS to find the shortest transformation sequence."
"128","Longest Consecutive Sequence","nums=[100,4,200,1,3,2], output=4","nums=[0,3,7,2,5,8,4,6,0,1], output=9","nums=[1], output=1","nums=[1,2], output=2","nums=[1,3], output=1","Google, Amazon","Medium","Array, Hash Table","Use a hash set to find the longest consecutive sequence."
"129","Sum Root to Leaf Numbers","root=[1,2,3], output=25","root=[4,9,0,5,1], output=1026","root=[1], output=1","root=[1,2], output=12","root=[4,9], output=49","Google, Amazon","Medium","Tree, DFS","Sum numbers formed by root-to-leaf paths."
"130","Surrounded Regions","board=[['X','X','X','X'],['X','O','O','X'],['X','X','O','X'],['X','O','X','X']], output=[['X','X','X','X'],['X','X','X','X'],['X','X','X','X'],['X','O','X','X']]","board=[['X']], output=[['X']]","board=[['O']], output=[['O']]","board=[['X','O'],['O','X']], output=[['X','O'],['O','X']]","board=[['O','O'],['O','O']], output=[['O','O']]","Google, Amazon","Medium","DFS, Union Find","Mark ‘O’s connected to the border using DFS."
"133","Clone Graph","node=1->[[2,4],[1,3],[2,4],[1,3]], output=cloned graph","node=1->[], output=cloned graph","node=1->[[2],[1]], output=cloned graph","node=1->[[2,3],[1,3],[1,2]], output=cloned graph","node=1->[[2],[1]], output=cloned graph","Google, Amazon","Medium","Graph, DFS, BFS","Use DFS or BFS to clone the graph with a hash map."
"134","Gas Station","gas=[1,2,3,4,5], cost=[3,4,5,1,2], output=3","gas=[2,3,4], cost=[3,4,3], output=-1","gas=[1], cost=[1], output=0","gas=[2,2], cost=[2,2], output=0","gas=[5,1,2,3,4], cost=[4,1,1,1,1], output=1","Google, Amazon","Medium","Array, Greedy","Check if total gas is sufficient and find starting point."
"135","Candy","ratings=[1,0,2], output=5","ratings=[1,2,2], output=4","ratings=[1], output=1","ratings=[1,2], output=3","ratings=[2,1], output=3","Google, Amazon","Hard","Array, Greedy","Assign candies based on ratings with two passes."
"136","Single Number","nums=[2,2,1], output=1","nums=[4,1,2,1,2], output=4","nums=[1], output=1","nums=[1,1,2], output=2","nums=[3,3,4], output=4","Google, Amazon","Easy","Array, Bit Manipulation","Use XOR to find the single number."
"137","Single Number II","nums=[2,2,3,2], output=3","nums=[0,1,0,1,0,1,99], output=99","nums=[1], output=1","nums=[2,2,2,3], output=3","nums=[1,1,1,4], output=4","Google, Amazon","Medium","Array, Bit Manipulation","Use bit manipulation to track numbers appearing once."
"138","Copy List with Random Pointer","head=[1,2,3,random=3,1,null], output=copied list","head=[1,null], output=copied list","head=[], output=[]","head=[1,1,random=1], output=copied list","head=[2,3,random=3], output=copied list","Google, Amazon","Medium","Linked List","Interleave nodes to copy with random pointers."
"139","Word Break","s='leetcode', wordDict=['leet','code'], output=true","s='applepenapple', wordDict=['apple','pen'], output=true","s='catsandog', wordDict=['cats','dog','sand','and','cat'], output=false","s='a', wordDict=['a'], output=true","s='ab', wordDict=['a','b'], output=true","Google, Amazon","Medium","Dynamic Programming","Use DP to check if string can be segmented."
"140","Word Break II","s='catsanddog', wordDict=['cat','cats','and','sand','dog'], output=['cats and dog','cat sand dog']","s='pineapplepenapple', wordDict=['apple','pen','applepen','pine','pineapple'], output=['pine apple pen apple','pineapple pen apple','pine applepen apple']","s='catsandog', wordDict=['cats','dog','sand','and','cat'], output=[]","s='a', wordDict=['a'], output=['a']","s='ab', wordDict=['a','b'], output=['a b']","Google, Amazon","Hard","Dynamic Programming, Backtracking","Use backtracking or DP to find all segmentations."
"141","Linked List Cycle","head=[3,2,0,-4], pos=1, output=true","head=[1,2], pos=0, output=true","head=[1], pos=-1, output=false","head=[1,2,3], pos=-1, output=false","head=[1,2,3,4], pos=2, output=true","Google, Amazon","Easy","Linked List, Two Pointers","Use Floyd’s cycle detection algorithm."
"142","Linked List Cycle II","head=[3,2,0,-4], pos=1, output=2","head=[1,2], pos=0, output=1","head=[1], pos=-1, output=null","head=[1,2,3], pos=-1, output=null","head=[1,2,3,4], pos=2, output=3","Google, Amazon","Medium","Linked List, Two Pointers","Use Floyd’s algorithm to find the cycle’s start."
"143","Reorder List","head=[1,2,3,4], output=[1,4,2,3]","head=[1,2,3,4,5], output=[1,5,2,4,3]","head=[1], output=[1]","head=[1,2], output=[1,2]","head=[1,2,3], output=[1,3,2]","Google, Amazon","Medium","Linked List","Find middle, reverse second half, and merge."
"144","Binary Tree Preorder Traversal","root=[1,null,2,3], output=[1,2,3]","root=[], output=[]","root=[1], output=[1]","root=[1,2], output=[1,2]","root=[1,null,2], output=[1,2]","Google, Amazon","Medium","Tree, DFS","Use recursive or iterative preorder traversal."
"145","Binary Tree Postorder Traversal","root=[1,null,2,3], output=[3,2,1]","root=[], output=[]","root=[1], output=[1]","root=[1,2], output=[2,1]","root=[1,null,2], output=[2,1]","Google, Amazon","Medium","Tree, DFS","Use recursive or iterative postorder traversal."
"146","LRU Cache","ops=['LRUCache','put','put','get','put','get','put','get','get','get'], args=[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]], output=[null,null,null,1,null,-1,null,-1,3,4]","ops=['LRUCache','put','get'], args=[[1],[1,1],[1]], output=[null,null,1]","ops=['LRUCache','get'], args=[[1],[1]], output=[null,-1]","ops=['LRUCache','put','put','get'], args=[[1],[1,1],[2,2],[1]], output=[null,null,null,1]","ops=['LRUCache','put','put','get'], args=[[2],[1,1],[2,2],[3]], output=[null,null,null,-1]","Google, Amazon","Medium","Design, Hash Table, Linked List","Use a hash map and doubly linked list for O(1) operations."
"147","Insertion Sort List","head=[4,2,1,3], output=[1,2,3,4]","head=[-1,5,3,4,0], output=[-1,0,3,4,5]","head=[1], output=[1]","head=[2,1], output=[1,2]","head=[1,1,1], output=[1,1,1]","Google, Amazon","Medium","Linked List, Sorting","Implement insertion sort on a linked list."
"148","Sort List","head=[4,2,1,3], output=[1,2,3,4]","head=[-1,5,3,4,0], output=[-1,0,3,4,5]","head=[1], output=[1]","head=[2,1], output=[1,2]","head=[1,1,1], output=[1,1,1]","Google, Amazon","Medium","Linked List, Sorting","Use merge sort for O(n log n) time."
"149","Max Points on a Line","points=[[1,1],[2,2],[3,3]], output=3","points=[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]], output=4","points=[[1,1]], output=1","points=[[1,1],[2,2]], output=2","points=[[0,0],[1,1],[0,0]], output=3","Google, Amazon","Hard","Math, Geometry","Calculate slopes to find collinear points."
"150","Evaluate Reverse Polish Notation","tokens=['2','1','+','3','*'], output=9","tokens=['4','13','5','/','+'], output=6","tokens=['10','6','9','3','+','-11','*','/','*','17','+','5','+'], output=22","tokens=['1'], output=1","tokens=['2','3','*'], output=6","Google, Amazon","Medium","Stack","Use a stack to evaluate postfix expressions."
"151","Reverse Words in a String","s='the sky is blue', output='blue is sky the'","s='  hello world  ', output='world hello'","s='a', output='a'","s='  a  b  ', output='b a'","s='hi!', output='hi!'","Google, Amazon","Medium","String","Split the string, reverse words, and join with single spaces."
"152","Maximum Product Subarray","nums=[2,3,-2,4], output=6","nums=[-2,0,-1], output=0","nums=[1], output=1","nums=[-2,-3], output=6","nums=[2,3,-2], output=6","Google, Amazon","Medium","Array, Dynamic Programming","Track max and min products due to negative numbers."
"153","Find Minimum in Rotated Sorted Array","nums=[3,4,5,1,2], output=1","nums=[4,5,6,7,0,1,2], output=0","nums=[1], output=1","nums=[2,1], output=1","nums=[3,1,2], output=1","Google, Amazon","Medium","Array, Binary Search","Use binary search to find the minimum."
"154","Find Minimum in Rotated Sorted Array II","nums=[1,3,5], output=1","nums=[2,2,2,0,1], output=0","nums=[1], output=1","nums=[2,2,2], output=2","nums=[3,3,1,3], output=1","Google, Amazon","Hard","Array, Binary Search","Handle duplicates with modified binary search."
"155","Min Stack","ops=['MinStack','push','push','push','getMin','pop','top','getMin'], args=[[],[-2],[0],[-3],[-3],[0],[-2]], output=[null,null,null,null,-3,null,0,-2]","ops=['MinStack','push','getMin'], args=[],[1], output=[null,null,1]","ops=['MinStack','push','pop','getMin'], args=[],[1], output=[null,null,null,null]","ops=['MinStack','push','push','getMin'], args=[],[1],[2], output=[null,null,null,1]","ops=['MinStack','push','top'], args=[],[3], output=[null,null,3]","Google, Amazon","Easy","Stack, Design","Use two stacks to track values and minimums."
"160","Intersection of Two Linked Lists","headA=[4,1,8,4,5], headB=[5,6,1,8,4,5], intersect=8, output=8","headA=[1,9,1,2,4], headB=[3,2,4], intersect=2, output=2","headA=[2,6,4], headB=[1,5], intersect=null, output=null","headA=[1], headB=[1], intersect=1, output=1","headA=[1,2], headB=[1,2], intersect=2, output=2","Google, Amazon","Easy","Linked List, Two Pointers","Find intersection by aligning lists with equal lengths."
"162","Find Peak Element","nums=[1,2,3,1], output=2","nums=[1,2,1,3,5,6,4], output=1 or 5","nums=[1], output=0","nums=[1,2], output=1","nums=[2,1], output=0","Google, Amazon","Medium","Array, Binary Search","Use binary search to find a peak element."
"165","Compare Version Numbers","version1='1.01', version2='1.001', output=0","version1='1.0', version2='1.0.0', output=0","version1='0.1', version2='1.1', output=-1","version1='1.0.1', version2='1', output=1","version1='7.5.2.4', version2='7.5.3', output=-1","Google, Amazon","Medium","String","Split versions and compare segments."
"166","Fraction to Recurring Decimal","numerator=1, denominator=2, output='0.5'","numerator=2, denominator=1, output='2'","numerator=2, denominator=3, output='0.(6)'","numerator=4, denominator=333, output='0.(012)'","numerator=-1, denominator=2, output='-0.5'","Google, Amazon","Medium","Math, Hash Table","Track remainders to detect repeating decimals."
"167","Two Sum II - Input Array Is Sorted","numbers=[2,7,11,15], target=9, output=[1,2]","numbers=[2,3,4], target=6, output=[1,3]","numbers=[-1,0], target=-1, output=[1,2]","numbers=[1,2,3], target=5, output=[2,3]","numbers=[0,0,3,4], target=0, output=[1,2]","Google, Amazon","Easy","Array, Two Pointers","Use two pointers on sorted array."
"168","Excel Sheet Column Title","columnNumber=1, output='A'","columnNumber=28, output='AB'","columnNumber=701, output='ZY'","columnNumber=26, output='Z'","columnNumber=27, output='AA'","Google, Amazon","Easy","Math","Convert number to base-26 representation."
"169","Majority Element","nums=[3,2,3], output=3","nums=[2,2,1,1,1,2,2], output=2","nums=[1], output=1","nums=[1,1], output=1","nums=[2,2,2,1], output=2","Google, Amazon","Easy","Array, Boyer-Moore Voting","Use Boyer-Moore voting algorithm."
"171","Excel Sheet Column Number","columnTitle='A', output=1","columnTitle='AB', output=28","columnTitle='ZY', output=701","columnTitle='Z', output=26","columnTitle='AA', output=27","Google, Amazon","Easy","Math","Convert base-26 string to number."
"172","Factorial Trailing Zeroes","n=5, output=1","n=0, output=0","n=3, output=0","n=10, output=2","n=25, output=6","Google, Amazon","Easy","Math","Count factors of 5 in factorial."
"173","Binary Search Tree Iterator","root=[7,3,15,null,null,9,20], ops=['BSTIterator','next','next','hasNext'], output=[null,3,7,true]","root=[1], ops=['BSTIterator','next','hasNext'], output=[null,1,false]","root=[3,1,4], ops=['BSTIterator','next'], output=[null,1]","root=[3,null,4], ops=['BSTIterator','next'], output=[null,3]","root=[5,3,7], ops=['BSTIterator','next','next'], output=[null,3,5]","Google, Amazon","Medium","Tree, Design","Use a stack for inorder traversal."
"174","Dungeon Game","dungeon=[[-2,-3,3],[-5,-10,1],[10,30,-5]], output=7","dungeon=[[0]], output=1","dungeon=[[100]], output=1","dungeon=[[-1]], output=2","dungeon=[[1,-2],[3,-4]], output=2","Google, Amazon","Hard","Dynamic Programming","Use DP to compute minimum health needed."
"179","Largest Number","nums=[10,2], output='210'","nums=[3,30,34,5,9], output='9534330'","nums=[1], output='1'","nums=[0,0], output='0'","nums=[23,45,67], output='674523'","Google, Amazon","Medium","String, Sorting","Sort numbers by custom comparator for largest concatenation."
"187","Repeated DNA Sequences","s='AAAAACCCCCAAAAACCCCCC', output=['AAAAACCCCC']","s='AAAAAAAAAAA', output=['AAAAAAAAAA']","s='AAAAAAAAAA', output=[]","s='AABBCCDDEE', output=[]","s='AAAAAABB', output=[]","Google, Amazon","Medium","String, Hash Table","Use a hash set to find repeated 10-length substrings."
"189","Rotate Array","nums=[1,2,3,4,5,6,7], k=3, output=[5,6,7,1,2,3,4]","nums=[-1,-100,3,99], k=2, output=[3,99,-1,-100]","nums=[1], k=0, output=[1]","nums=[1,2], k=1, output=[2,1]","nums=[1,2,3], k=4, output=[3,1,2]","Google, Amazon","Medium","Array","Use reverse operations to rotate in-place."
"190","Reverse Bits","n=43261596, output=964176192","n=4294967293, output=3221225471","n=0, output=0","n=1, output=2147483648","n=2, output=1073741824","Google, Amazon","Easy","Bit Manipulation","Reverse bits using bitwise operations."
"191","Number of 1 Bits","n=11, output=3","n=128, output=1","n=4294967295, output=32","n=0, output=0","n=1, output=1","Google, Amazon","Easy","Bit Manipulation","Count set bits using bitwise operations."
"198","House Robber","nums=[1,2,3,1], output=4","nums=[2,7,9,3,1], output=12","nums=[1], output=1","nums=[2,1], output=2","nums=[1,2], output=2","Google, Amazon","Medium","Dynamic Programming","Use DP to maximize loot without adjacent houses."
"199","Binary Tree Right Side View","root=[1,2,3,null,5,null,4], output=[1,3,4]","root=[1,null,3], output=[1,3]","root=[1], output=[1]","root=[1,2], output=[1,2]","root=[1,null,2,null,3], output=[1,2,3]","Google, Amazon","Medium","Tree, BFS, DFS","Use BFS or DFS to collect rightmost nodes per level."
"200","Number of Islands","grid=[['1','1','0','0','0'],['1','1','0','0','0'],['0','0','1','0','0'],['0','0','0','1','1']], output=3","grid=[['1']], output=1","grid=[['0']], output=0","grid=[['1','0'],['0','1']], output=2","grid=[['1','1'],['1','1']], output=1","Google, Amazon, Microsoft","Medium","DFS, BFS, Union Find","Count connected components of ‘1’s using DFS or BFS."
"201","Bitwise AND of Numbers Range","left=5, right=7, output=4","left=0, right=0, output=0","left=1, right=2147483647, output=0","left=2, right=3, output=2","left=6, right=7, output=6","Google, Amazon","Medium","Bit Manipulation","Find common prefix of binary representations."
"202","Happy Number","n=19, output=true","n=2, output=false","n=7, output=true","n=1, output=true","n=23, output=true","Google, Amazon","Easy","Math, Hash Table","Detect cycle in sum of squared digits."
"203","Remove Linked List Elements","head=[1,2,6,3,4,6], val=6, output=[1,2,3,4]","head=[1], val=1, output=[]","head=[7,7,7,7], val=7, output=[]","head=[1,2,3], val=4, output=[1,2,3]","head=[1,1], val=1, output=[]","Google, Amazon","Easy","Linked List","Remove nodes with the given value."
"204","Count Primes","n=10, output=4","n=0, output=0","n=1, output=0","n=2, output=0","n=15, output=6","Google, Amazon","Medium","Math","Use Sieve of Eratosthenes to count primes."
"205","Isomorphic Strings","s='egg', t='add', output=true","s='foo', t='bar', output=false","s='paper', t='title', output=true","s='badc', t='baba', output=false","s='egg', t='egg', output=true","Google, Amazon","Easy","String, Hash Table","Map characters from s to t for one-to-one mapping."
"206","Reverse Linked List","head=[1,2,3,4,5], output=[5,4,3,2,1]","head=[1,2], output=[2,1]","head=[1], output=[1]","head=[], output=[]","head=[1,2,3], output=[3,2,1]","Google, Amazon","Easy","Linked List","Reverse pointers iteratively or recursively."
"207","Course Schedule","numCourses=2, prerequisites=[[1,0]], output=true","numCourses=2, prerequisites=[[1,0],[0,1]], output=false","numCourses=1, prerequisites=[], output=true","numCourses=3, prerequisites=[[1,0],[2,1]], output=true","numCourses=3, prerequisites=[[1,0],[0,2],[2,1]], output=false","Google, Amazon","Medium","Graph, DFS, BFS","Detect cycle in a directed graph."
"208","Implement Trie (Prefix Tree)","ops=['Trie','insert','search','search','startsWith','insert','search'], args=[[],['apple'], ['apple'], ['app'], ['app'], ['app'], ['app']], output=[null,null,true,false,true,null,true]","ops=['Trie','insert','search'], args=[[],['apple'],['apple']], output=[null,null,true]","ops=['Trie','search'], args=[[],['a']], output=[null,false]","ops=['Trie','insert','startsWith'], args=[[],['apple'],['app']], output=[null,null,true]","ops=['Trie','insert','search'], args=[[],['a'],['a']], output=[null,null,true]","Google, Amazon, Microsoft","Medium","Trie, Design","Implement trie with insert, search, and startsWith."
"209","Minimum Size Subarray Sum","target=7, nums=[2,3,1,2,4,3], output=2","target=4, nums=[1,4,4], output=1","target=11, nums=[1,1,1,1,1,1,1,1], output=0","target=3, nums=[1,2], output=2","target=6, nums=[1,2,3], output=2","Google, Amazon","Medium","Array, Sliding Window","Use sliding window to find shortest subarray."
"210","Course Schedule II","numCourses=2, prerequisites=[[1,0]], output=[0,1]","numCourses=4, prerequisites=[[1,0],[2,0],[3,1],[3,2]], output=[0,2,1,3]","numCourses=1, prerequisites=[], output=[0]","numCourses=2, prerequisites=[[1,0],[0,1]], output=[]","numCourses=3, prerequisites=[[1,0],[2,1]], output=[0,1,2]","Google, Amazon","Medium","Graph, DFS, BFS","Use topological sort to order courses."
"211","Design Add and Search Words Data Structure","ops=['WordDictionary','addWord','addWord','addWord','search'], args=[[],['bad'],['dad'],['mad'],['pad']], output=[null,null,null,null,false]","ops=['WordDictionary','addWord','search'], args=[[],['bad'],['bad']], output=[null,null,true]","ops=['WordDictionary','addWord','search'], args=[[],['bad'],['.ad']], output=[null,null,true]","ops=['WordDictionary','addWord','search'], args=[[],['bad'],['b..']], output=[null,null,true]","ops=['WordDictionary','search'], args=[[],['a']], output=[null,false]","Google, Amazon","Medium","Trie, Design","Use trie with DFS for wildcard search."
"212","Word Search II","board=[['o','a','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words=['oath','pea','eat','rain'], output=['eat','oath']","board=[['a','b'],['c','d']], words=['ab','cb','ad','bd','ac','ca','da','bc','db','adcb','dabc','abb','acb'], output=['ab','ac','bd','ca','db']","board=[['a']], words=['a'], output=['a']","board=[['a','b']], words=['ab','ba'], output=['ab']","board=[['a']], words=['b'], output=[]","Google, Amazon","Hard","Trie, Backtracking","Use trie to optimize word search."
"213","House Robber II","nums=[2,3,2], output=3","nums=[1,2,3,1], output=4","nums=[1], output=1","nums=[1,2], output=2","nums=[2,1,1,2], output=3","Google, Amazon","Medium","Dynamic Programming","Handle circular array by considering two cases."
"215","Kth Largest Element in an Array","nums=[3,2,1,5,6,4], k=2, output=5","nums=[3,2,3,1,2,4,5,5,6], k=4, output=4","nums=[1], k=1, output=1","nums=[1,2], k=1, output=2","nums=[2,1], k=2, output=1","Google, Amazon","Medium","Array, Heap, Quickselect","Use a min-heap or quickselect to find kth largest."
"216","Combination Sum III","k=3, n=7, output=[[1,2,4]]","k=3, n=9, output=[[1,2,6],[1,3,5],[2,3,4]]","k=4, n=1, output=[]","k=2, n=5, output=[[1,4],[2,3]]","k=1, n=1, output=[[1]]","Google, Amazon","Medium","Backtracking","Use backtracking to find combinations of k numbers summing to n."
"217","Contains Duplicate","nums=[1,2,3,1], output=true","nums=[1,2,3,4], output=false","nums=[1], output=false","nums=[1,1], output=true","nums=[1,2], output=false","Google, Amazon","Easy","Array, Hash Table","Use a hash set to check for duplicates."
"219","Contains Duplicate II","nums=[1,2,3,1], k=3, output=true","nums=[1,0,1,1], k=1, output=true","nums=[1,2,3,1,2,3], k=2, output=false","nums=[1], k=1, output=false","nums=[1,1], k=1, output=true","Google, Amazon","Easy","Array, Hash Table","Track indices in a hash map within distance k."
"221","Maximal Square","matrix=[['1','0','1','0','0'],['1','0','1','1','1'],['1','1','1','1','1'],['1','0','0','1','0']], output=4","matrix=[['0']], output=0","matrix=[['1']], output=1","matrix=[['1','0'],['0','1']], output=1","matrix=[['1','1'],['1','1']], output=4","Google, Amazon","Medium","Dynamic Programming","Use DP to find the largest square of ‘1’s."
"222","Count Complete Tree Nodes","root=[1,2,3,4,5,6], output=6","root=[1], output=1","root=[], output=0","root=[1,2,3], output=3","root=[1,null,2], output=2","Google, Amazon","Medium","Tree, Binary Search","Use binary search on complete tree properties."
"223","Rectangle Area","ax1=-3, ay1=0, ax2=3, ay2=4, bx1=0, by1=-1, bx2=9, by2=2, output=45","ax1=-2, ay1=-2, ax2=2, ay2=2, bx1=-2, by1=-2, bx2=2, by2=2, output=16","ax1=0, ay1=0, ax2=1, ay2=1, bx1=1, by1=1, bx2=2, by2=2, output=2","ax1=-2, ay1=-2, ax2=2, ay2=2, bx1=3, by1=3, bx2=4, by2=4, output=17","ax1=0, ay1=0, ax2=1, ay2=1, bx1=2, by1=2, bx2=3, by2=3, output=2","Google, Amazon","Medium","Math, Geometry","Calculate total area minus overlapping area."
"224","Basic Calculator","s='1 + 1', output=2","s=' 2-1 + 2 ', output=3","s='(1+(4+5+2)-3)+(6+8)', output=23","s='1', output=1","s='(2+3)', output=5","Google, Amazon","Hard","String, Stack","Use a stack to handle parentheses and signs."
"225","Implement Stack using Queues","ops=['MyStack','push','push','top','pop','empty'], args=[[],1,2,2,2,[]], output=[null,null,null,2,2,false]","ops=['MyStack','push','top'], args=[[],1,[]], output=[null,null,1]","ops=['MyStack','empty'], args=[[],[]], output=[null,true]","ops=['MyStack','push','pop'], args=[[],1,[]], output=[null,null,1]","ops=['MyStack','push','push','pop'], args=[[],1,2,[]], output=[null,null,null,2]","Google, Amazon","Easy","Stack, Queue, Design","Use one or two queues to simulate stack operations."
"226","Invert Binary Tree","root=[4,2,7,1,3,6,9], output=[4,7,2,9,6,3,1]","root=[2,1,3], output=[2,3,1]","root=[1], output=[1]","root=[1,2], output=[1,null,2]","root=[1,null,2], output=[1,2,null]","Google, Amazon","Easy","Tree, DFS","Swap left and right children recursively."
"227","Basic Calculator II","s='3+2*2', output=7","s=' 3/2 ', output=1","s=' 3+5 / 2 ', output=5","s='1+2*3', output=7","s='14-3/2', output=13","Google, Amazon","Medium","String, Stack","Evaluate multiplication/division first, then addition/subtraction."
"228","Summary Ranges","nums=[0,1,2,4,5,7], output=['0->2','4->5','7']","nums=[0,2,3,4,6,8,9], output=['0','2->4','6','8->9']","nums=[], output=[]","nums=[1], output=['1']","nums=[1,3], output=['1','3']","Google, Amazon","Easy","Array","Iterate and group consecutive numbers into ranges."
"229","Majority Element II","nums=[3,2,3], output=[3]","nums=[1], output=[1]","nums=[1,2], output=[]","nums=[2,2,2,1,1], output=[2]","nums=[1,1,1,3,3,2,2,2], output=[1,2]","Google, Amazon","Medium","Array, Boyer-Moore Voting","Extend Boyer-Moore voting for elements > n/3."
"230","Kth Smallest Element in a BST","root=[3,1,4,null,2], k=1, output=1","root=[5,3,6,2,4,null,null,1], k=3, output=3","root=[1], k=1, output=1","root=[3,1,4], k=2, output=3","root=[5,3,7], k=2, output=3","Google, Amazon","Medium","Tree, DFS","Use inorder traversal to find kth smallest."
"231","Power of Two","n=1, output=true","n=16, output=true","n=3, output=false","n=0, output=false","n=4, output=true","Google, Amazon","Easy","Math, Bit Manipulation","Check if only one bit is set."
"232","Implement Queue using Stacks","ops=['MyQueue','push','push','peek','pop','empty'], args=[[],1,2,1,1,[]], output=[null,null,null,1,1,false]","ops=['MyQueue','push','peek'], args=[[],1,[]], output=[null,null,1]","ops=['MyQueue','empty'], args=[[],[]], output=[null,true]","ops=['MyQueue','push','pop'], args=[[],1,[]], output=[null,null,1]","ops=['MyQueue','push','push','pop'], args=[[],1,2,[]], output=[null,null,null,1]","Google, Amazon","Easy","Stack, Queue, Design","Use two stacks to simulate queue operations."
"234","Palindrome Linked List","head=[1,2,2,1], output=true","head=[1,2], output=false","head=[1], output=true","head=[1,1], output=true","head=[1,2,3,2,1], output=true","Google, Amazon","Easy","Linked List","Reverse second half and compare."
"235","Lowest Common Ancestor of a Binary Search Tree","root=[6,2,8,0,4,7,9,null,null,3,5], p=2, q=8, output=6","root=[6,2,8], p=2, q=8, output=6","root=[2,1], p=2, q=1, output=2","root=[2,1,3], p=1, q=3, output=2","root=[6,2,8,0,4], p=2, q=4, output=2","Google, Amazon","Easy","Tree, DFS","Use BST properties to find LCA."
"236","Lowest Common Ancestor of a Binary Tree","root=[3,5,1,6,2,0,8,null,null,7,4], p=5, q=1, output=3","root=[3,5,1], p=5, q=1, output=3","root=[1,2], p=1, q=2, output=1","root=[1,2,3], p=2, q=3, output=1","root=[3,5,1,6,2], p=5, q=2, output=3","Google, Amazon","Medium","Tree, DFS","Find paths to p and q, then find common ancestor."
"237","Delete Node in a Linked List","node=4->5->1->9, node=5, output=4->1->9","node=4->5->1->9, node=1, output=4->5->9","node=1->2, node=1, output=2","node=1->2->3, node=2, output=1->3","node=1->2->3->4, node=3, output=1->2->4","Google, Amazon","Easy","Linked List","Copy next node’s value and delete next node."
"238","Product of Array Except Self","nums=[1,2,3,4], output=[24,12,8,6]","nums=[-1,1], output=[1,-1]","nums=[1,2], output=[2,1]","nums=[0,1], output=[1,0]","nums=[2,3,4], output=[12,8,6]","Google, Amazon","Medium","Array","Compute products of left and right parts."
"239","Sliding Window Maximum","nums=[1,3,-1,-3,5,3,6,7], k=3, output=[3,3,5,5,6,7]","nums=[1], k=1, output=[1]","nums=[1,2], k=2, output=[2]","nums=[7,2,4], k=2, output=[7,4]","nums=[1,2,3], k=3, output=[3]","Google, Amazon","Hard","Array, Sliding Window, Deque","Use a deque to track maximums in the window."
"240","Search a 2D Matrix II","matrix=[[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target=5, output=true","matrix=[[1,4,7],[2,5,8],[3,6,9]], target=20, output=false","matrix=[[1]], target=1, output=true","matrix=[[1,2]], target=2, output=true","matrix=[[1],[2]], target=2, output=true","Google, Amazon","Medium","Array, Binary Search","Search from top-right corner to leverage sorted properties."
"241","Different Ways to Add Parentheses","expression='2-1-1', output=[0,2]","expression='2*3-4*5', output=[-34,-14,-10,-10,10]","expression='1', output=[1]","expression='2+3', output=[5]","expression='2*3', output=[6]","Google, Amazon","Medium","Divide and Conquer","Recursively split expression at operators."
"242","Valid Anagram","s='anagram', t='nagaram', output=true","s='rat', t='car', output=false","s='a', t='a', output=true","s='ab', t='ba', output=true","s='aacc', t='ccac', output=false","Google, Amazon","Easy","String, Hash Table","Compare character frequencies using hash map or sorting."
"243","Shortest Word Distance","words=['practice','makes','perfect','coding','makes'], word1='coding', word2='practice', output=3","words=['practice','makes','perfect','coding','makes'], word1='makes', word2='coding', output=1","words=['a','b'], word1='a', word2='b', output=1","words=['a','a','b'], word1='a', word2='b', output=1","words=['a','b','c'], word1='a', word2='c', output=2","Google, Amazon","Easy","Array","Track indices of words and find minimum distance."
"244","Shortest Word Distance II","ops=['WordDistance','shortest','shortest'], args=[['practice','makes','perfect','coding','makes'],['coding','practice'],['makes','coding']], output=[null,3,1]","ops=['WordDistance','shortest'], args=[['a','b'],['a','b']], output=[null,1]","ops=['WordDistance','shortest'], args=[['a','a','b'],['a','b']], output=[null,1]","ops=['WordDistance','shortest'], args=[['a','b','c'],['a','c']], output=[null,2]","ops=['WordDistance','shortest'], args=[['coding','coding','coding'],['coding','coding']], output=[null,1]","Google, Amazon","Medium","Hash Table, Design","Store word indices in a hash map for efficient distance queries."
"245","Shortest Word Distance III","words=['practice','makes','perfect','coding','makes'], word1='makes', word2='makes', output=1","words=['practice','makes','perfect','coding','makes'], word1='coding', word2='practice', output=3","words=['a','a'], word1='a', word2='a', output=1","words=['a','b'], word1='a', word2='b', output=1","words=['a','a','b'], word1='a', word2='b', output=1","Google, Amazon","Medium","Array","Handle case where word1 equals word2 in distance calculation."
"246","Strobogrammatic Number","num='69', output=true","num='88', output=true","num='962', output=false","num='1', output=true","num='25', output=false","Google, Amazon","Easy","String, Two Pointers","Check if number is valid when rotated 180 degrees."
