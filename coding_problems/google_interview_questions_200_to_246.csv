id,question,tc1,tc2,tc3,tc4,tc5,company,difficulty,category,hint
200,Number of Islands,"grid=[['1','1','0','0','0'],['1','1','0','0','0'],['0','0','1','0','0'],['0','0','0','1','1']], output=3","grid=[['1']], output=1","grid=[['0']], output=0","grid=[['1','0'],['0','1']], output=2","grid=[['1','1'],['1','1']], output=1","Google, Amazon, Microsoft","Medium","DFS, BFS, Union Find","Count connected components of ‘1’s using DFS or BFS."
201,Bitwise AND of Numbers Range,"left=5, right=7, output=4","left=0, right=0, output=0","left=1, right=2147483647, output=0","left=2, right=3, output=2","left=6, right=7, output=6","Google, Amazon","Medium","Bit Manipulation","Find common prefix of binary representations."
202,Happy Number,"n=19, output=true","n=2, output=false","n=7, output=true","n=1, output=true","n=23, output=true","Google, Amazon","Easy","Math, Hash Table","Detect cycle in sum of squared digits."
203,Remove Linked List Elements,"head=[1,2,6,3,4,6], val=6, output=[1,2,3,4]","head=[1], val=1, output=[]","head=[7,7,7,7], val=7, output=[]","head=[1,2,3], val=4, output=[1,2,3]","head=[1,1], val=1, output=[]","Google, Amazon","Easy","Linked List","Remove nodes with the given value."
204,Count Primes,"n=10, output=4","n=0, output=0","n=1, output=0","n=2, output=0","n=15, output=6","Google, Amazon","Medium","Math","Use Sieve of Eratosthenes to count primes."
205,Isomorphic Strings,"s='egg', t='add', output=true","s='foo', t='bar', output=false","s='paper', t='title', output=true","s='badc', t='baba', output=false","s='egg', t='egg', output=true","Google, Amazon","Easy","String, Hash Table","Map characters from s to t for one-to-one mapping."
206,Reverse Linked List,"head=[1,2,3,4,5], output=[5,4,3,2,1]","head=[1,2], output=[2,1]","head=[1], output=[1]","head=[], output=[]","head=[1,2,3], output=[3,2,1]","Google, Amazon","Easy","Linked List","Reverse pointers iteratively or recursively."
207,Course Schedule,"numCourses=2, prerequisites=[[1,0]], output=true","numCourses=2, prerequisites=[[1,0],[0,1]], output=false","numCourses=1, prerequisites=[], output=true","numCourses=3, prerequisites=[[1,0],[2,1]], output=true","numCourses=3, prerequisites=[[1,0],[0,2],[2,1]], output=false","Google, Amazon","Medium","Graph, DFS, BFS","Detect cycle in a directed graph."
208,Implement Trie (Prefix Tree),"ops=['Trie','insert','search','search','startsWith','insert','search'], args=[[],['apple'], ['apple'], ['app'], ['app'], ['app'], ['app']], output=[null,null,true,false,true,null,true]","ops=['Trie','insert','search'], args=[[],['apple'],['apple']], output=[null,null,true]","ops=['Trie','search'], args=[[],['a']], output=[null,false]","ops=['Trie','insert','startsWith'], args=[[],['apple'],['app']], output=[null,null,true]","ops=['Trie','insert','search'], args=[[],['a'],['a']], output=[null,null,true]","Google, Amazon, Microsoft","Medium","Trie, Design","Implement trie with insert, search, and startsWith."
209,Minimum Size Subarray Sum,"target=7, nums=[2,3,1,2,4,3], output=2","target=4, nums=[1,4,4], output=1","target=11, nums=[1,1,1,1,1,1,1,1], output=0","target=3, nums=[1,2], output=2","target=6, nums=[1,2,3], output=2","Google, Amazon","Medium","Array, Sliding Window","Use sliding window to find shortest subarray."
210,Course Schedule II,"numCourses=2, prerequisites=[[1,0]], output=[0,1]","numCourses=4, prerequisites=[[1,0],[2,0],[3,1],[3,2]], output=[0,2,1,3]","numCourses=1, prerequisites=[], output=[0]","numCourses=2, prerequisites=[[1,0],[0,1]], output=[]","numCourses=3, prerequisites=[[1,0],[2,1]], output=[0,1,2]","Google, Amazon","Medium","Graph, DFS, BFS","Use topological sort to order courses."
211,Design Add and Search Words Data Structure,"ops=['WordDictionary','addWord','addWord','addWord','search'], args=[[],['bad'],['dad'],['mad'],['pad']], output=[null,null,null,null,false]","ops=['WordDictionary','addWord','search'], args=[[],['bad'],['bad']], output=[null,null,true]","ops=['WordDictionary','addWord','search'], args=[[],['bad'],['.ad']], output=[null,null,true]","ops=['WordDictionary','addWord','search'], args=[[],['bad'],['b..']], output=[null,null,true]","ops=['WordDictionary','search'], args=[[],['a']], output=[null,false]","Google, Amazon","Medium","Trie, Design","Use trie with DFS for wildcard search."
212,Word Search II,"board=[['o','a','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words=['oath','pea','eat','rain'], output=['eat','oath']","board=[['a','b'],['c','d']], words=['ab','cb','ad','bd','ac','ca','da','bc','db','adcb','dabc','abb','acb'], output=['ab','ac','bd','ca','db']","board=[['a']], words=['a'], output=['a']","board=[['a','b']], words=['ab','ba'], output=['ab']","board=[['a']], words=['b'], output=[]","Google, Amazon","Hard","Trie, Backtracking","Use trie to optimize word search."
213,House Robber II,"nums=[2,3,2], output=3","nums=[1,2,3,1], output=4","nums=[1], output=1","nums=[1,2], output=2","nums=[2,1,1,2], output=3","Google, Amazon","Medium","Dynamic Programming","Handle circular array by considering two cases."
215,Kth Largest Element in an Array,"nums=[3,2,1,5,6,4], k=2, output=5","nums=[3,2,3,1,2,4,5,5,6], k=4, output=4","nums=[1], k=1, output=1","nums=[1,2], k=1, output=2","nums=[2,1], k=2, output=1","Google, Amazon","Medium","Array, Heap, Quickselect","Use a min-heap or quickselect to find kth largest."
216,Combination Sum III,"k=3, n=7, output=[[1,2,4]]","k=3, n=9, output=[[1,2,6],[1,3,5],[2,3,4]]","k=4, n=1, output=[]","k=2, n=5, output=[[1,4],[2,3]]","k=1, n=1, output=[[1]]","Google, Amazon","Medium","Backtracking","Use backtracking to find combinations of k numbers summing to n."
217,Contains Duplicate,"nums=[1,2,3,1], output=true","nums=[1,2,3,4], output=false","nums=[1], output=false","nums=[1,1], output=true","nums=[1,2], output=false","Google, Amazon","Easy","Array, Hash Table","Use a hash set to check for duplicates."
219,Contains Duplicate II,"nums=[1,2,3,1], k=3, output=true","nums=[1,0,1,1], k=1, output=true","nums=[1,2,3,1,2,3], k=2, output=false","nums=[1], k=1, output=false","nums=[1,1], k=1, output=true","Google, Amazon","Easy","Array, Hash Table","Track indices in a hash map within distance k."
221,Maximal Square,"matrix=[['1','0','1','0','0'],['1','0','1','1','1'],['1','1','1','1','1'],['1','0','0','1','0']], output=4","matrix=[['0']], output=0","matrix=[['1']], output=1","matrix=[['1','0'],['0','1']], output=1","matrix=[['1','1'],['1','1']], output=4","Google, Amazon","Medium","Dynamic Programming","Use DP to find the largest square of ‘1’s."
222,Count Complete Tree Nodes,"root=[1,2,3,4,5,6], output=6","root=[1], output=1","root=[], output=0","root=[1,2,3], output=3","root=[1,null,2], output=2","Google, Amazon","Medium","Tree, Binary Search","Use binary search on complete tree properties."
223,Rectangle Area,"ax1=-3, ay1=0, ax2=3, ay2=4, bx1=0, by1=-1, bx2=9, by2=2, output=45","ax1=-2, ay1=-2, ax2=2, ay2=2, bx1=-2, by1=-2, bx2=2, by2=2, output=16","ax1=0, ay1=0, ax2=1, ay2=1, bx1=1, by1=1, bx2=2, by2=2, output=2","ax1=-2, ay1=-2, ax2=2, ay2=2, bx1=3, by1=3, bx2=4, by2=4, output=17","ax1=0, ay1=0, ax2=1, ay2=1, bx1=2, by1=2, bx2=3, by2=3, output=2","Google, Amazon","Medium","Math, Geometry","Calculate total area minus overlapping area."
224,Basic Calculator,"s='1 + 1', output=2","s=' 2-1 + 2 ', output=3","s='(1+(4+5+2)-3)+(6+8)', output=23","s='1', output=1","s='(2+3)', output=5","Google, Amazon","Hard","String, Stack","Use a stack to handle parentheses and signs."
225,Implement Stack using Queues,"ops=['MyStack','push','push','top','pop','empty'], args=[[],1,2,2,2,[]], output=[null,null,null,2,2,false]","ops=['MyStack','push','top'], args=[[],1,[]], output=[null,null,1]","ops=['MyStack','empty'], args=[[],[]], output=[null,true]","ops=['MyStack','push','pop'], args=[[],1,[]], output=[null,null,1]","ops=['MyStack','push','push','pop'], args=[[],1,2,[]], output=[null,null,null,2]","Google, Amazon","Easy","Stack, Queue, Design","Use one or two queues to simulate stack operations."
226,Invert Binary Tree,"root=[4,2,7,1,3,6,9], output=[4,7,2,9,6,3,1]","root=[2,1,3], output=[2,3,1]","root=[1], output=[1]","root=[1,2], output=[1,null,2]","root=[1,null,2], output=[1,2,null]","Google, Amazon","Easy","Tree, DFS","Swap left and right children recursively."
227,Basic Calculator II,"s='3+2*2', output=7","s=' 3/2 ', output=1","s=' 3+5 / 2 ', output=5","s='1+2*3', output=7","s='14-3/2', output=13","Google, Amazon","Medium","String, Stack","Evaluate multiplication/division first, then addition/subtraction."
228,Summary Ranges,"nums=[0,1,2,4,5,7], output=['0->2','4->5','7']","nums=[0,2,3,4,6,8,9], output=['0','2->4','6','8->9']","nums=[], output=[]","nums=[1], output=['1']","nums=[1,3], output=['1','3']","Google, Amazon","Easy","Array","Iterate and group consecutive numbers into ranges."
229,Majority Element II,"nums=[3,2,3], output=[3]","nums=[1], output=[1]","nums=[1,2], output=[]","nums=[2,2,2,1,1], output=[2]","nums=[1,1,1,3,3,2,2,2], output=[1,2]","Google, Amazon","Medium","Array, Boyer-Moore Voting","Extend Boyer-Moore voting for elements > n/3."
230,Kth Smallest Element in a BST,"root=[3,1,4,null,2], k=1, output=1","root=[5,3,6,2,4,null,null,1], k=3, output=3","root=[1], k=1, output=1","root=[3,1,4], k=2, output=3","root=[5,3,7], k=2, output=3","Google, Amazon","Medium","Tree, DFS","Use inorder traversal to find kth smallest."
231,Power of Two,"n=1, output=true","n=16, output=true","n=3, output=false","n=0, output=false","n=4, output=true","Google, Amazon","Easy","Math, Bit Manipulation","Check if only one bit is set."
232,Implement Queue using Stacks,"ops=['MyQueue','push','push','peek','pop','empty'], args=[[],1,2,1,1,[]], output=[null,null,null,1,1,false]","ops=['MyQueue','push','peek'], args=[[],1,[]], output=[null,null,1]","ops=['MyQueue','empty'], args=[[],[]], output=[null,true]","ops=['MyQueue','push','pop'], args=[[],1,[]], output=[null,null,1]","ops=['MyQueue','push','push','pop'], args=[[],1,2,[]], output=[null,null,null,1]","Google, Amazon","Easy","Stack, Queue, Design","Use two stacks to simulate queue operations."
234,Palindrome Linked List,"head=[1,2,2,1], output=true","head=[1,2], output=false","head=[1], output=true","head=[1,1], output=true","head=[1,2,3,2,1], output=true","Google, Amazon","Easy","Linked List","Reverse second half and compare."
235,Lowest Common Ancestor of a Binary Search Tree,"root=[6,2,8,0,4,7,9,null,null,3,5], p=2, q=8, output=6","root=[6,2,8], p=2, q=8, output=6","root=[2,1], p=2, q=1, output=2","root=[2,1,3], p=1, q=3, output=2","root=[6,2,8,0,4], p=2, q=4, output=2","Google, Amazon","Easy","Tree, DFS","Use BST properties to find LCA."
236,Lowest Common Ancestor of a Binary Tree,"root=[3,5,1,6,2,0,8,null,null,7,4], p=5, q=1, output=3","root=[3,5,1], p=5, q=1, output=3","root=[1,2], p=1, q=2, output=1","root=[1,2,3], p=2, q=3, output=1","root=[3,5,1,6,2], p=5, q=2, output=3","Google, Amazon","Medium","Tree, DFS","Find paths to p and q, then find common ancestor."
237,Delete Node in a Linked List,"node=4->5->1->9, node=5, output=4->1->9","node=4->5->1->9, node=1, output=4->5->9","node=1->2, node=1, output=2","node=1->2->3, node=2, output=1->3","node=1->2->3->4, node=3, output=1->2->4","Google, Amazon","Easy","Linked List","Copy next node’s value and delete next node."
238,Product of Array Except Self,"nums=[1,2,3,4], output=[24,12,8,6]","nums=[-1,1], output=[1,-1]","nums=[1,2], output=[2,1]","nums=[0,1], output=[1,0]","nums=[2,3,4], output=[12,8,6]","Google, Amazon","Medium","Array","Compute products of left and right parts."
239,Sliding Window Maximum,"nums=[1,3,-1,-3,5,3,6,7], k=3, output=[3,3,5,5,6,7]","nums=[1], k=1, output=[1]","nums=[1,2], k=2, output=[2]","nums=[7,2,4], k=2, output=[7,4]","nums=[1,2,3], k=3, output=[3]","Google, Amazon","Hard","Array, Sliding Window, Deque","Use a deque to track maximums in the window."
240,Search a 2D Matrix II,"matrix=[[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target=5, output=true","matrix=[[1,4,7],[2,5,8],[3,6,9]], target=20, output=false","matrix=[[1]], target=1, output=true","matrix=[[1,2]], target=2, output=true","matrix=[[1],[2]], target=2, output=true","Google, Amazon","Medium","Array, Binary Search","Search from top-right corner to leverage sorted properties."
241,Different Ways to Add Parentheses,"expression='2-1-1', output=[0,2]","expression='2*3-4*5', output=[-34,-14,-10,-10,10]","expression='1', output=[1]","expression='2+3', output=[5]","expression='2*3', output=[6]","Google, Amazon","Medium","Divide and Conquer","Recursively split expression at operators."
242,Valid Anagram,"s='anagram', t='nagaram', output=true","s='rat', t='car', output=false","s='a', t='a', output=true","s='ab', t='ba', output=true","s='aacc', t='ccac', output=false","Google, Amazon","Easy","String, Hash Table","Compare character frequencies using hash map or sorting."
243,Shortest Word Distance,"words=['practice','makes','perfect','coding','makes'], word1='coding', word2='practice', output=3","words=['practice','makes','perfect','coding','makes'], word1='makes', word2='coding', output=1","words=['a','b'], word1='a', word2='b', output=1","words=['a','a','b'], word1='a', word2='b', output=1","words=['a','b','c'], word1='a', word2='c', output=2","Google, Amazon","Easy","Array","Track indices of words and find minimum distance."
244,Shortest Word Distance II,"ops=['WordDistance','shortest','shortest'], args=[['practice','makes','perfect','coding','makes'],['coding','practice'],['makes','coding']], output=[null,3,1]","ops=['WordDistance','shortest'], args=[['a','b'],['a','b']], output=[null,1]","ops=['WordDistance','shortest'], args=[['a','a','b'],['a','b']], output=[null,1]","ops=['WordDistance','shortest'], args=[['a','b','c'],['a','c']], output=[null,2]","ops=['WordDistance','shortest'], args=[['coding','coding','coding'],['coding','coding']], output=[null,1]","Google, Amazon","Medium","Hash Table, Design","Store word indices in a hash map for efficient distance queries."
245,Shortest Word Distance III,"words=['practice','makes','perfect','coding','makes'], word1='makes', word2='makes', output=1","words=['practice','makes','perfect','coding','makes'], word1='coding', word2='practice', output=3","words=['a','a'], word1='a', word2='a', output=1","words=['a','b'], word1='a', word2='b', output=1","words=['a','a','b'], word1='a', word2='b', output=1","Google, Amazon","Medium","Array","Handle case where word1 equals word2 in distance calculation."
246,Strobogrammatic Number,"num='69', output=true","num='88', output=true","num='962', output=false","num='1', output=true","num='25', output=false","Google, Amazon","Easy","String, Two Pointers","Check if number is valid when rotated 180 degrees."