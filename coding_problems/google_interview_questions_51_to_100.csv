id,question,tc1,tc2,tc3,tc4,tc5,company,difficulty,category,hint
53,Maximum Subarray,"nums=[-2,1,-3,4,-1,2,1,-5,4], output=6","nums=[1], output=1","nums=[-1], output=-1","nums=[-2,-1], output=-1","nums=[1,2,3], output=6","Google, Amazon, Facebook","Easy","Array, Dynamic Programming","Use Kadaneâ€™s algorithm to find the maximum subarray sum."
54,Spiral Matrix,"matrix=[[1,2,3],[4,5,6],[7,8,9]], output=[1,2,3,6,9,8,7,4,5]","matrix=[[1,2,3,4],[5,6,7,8],[9,10,11,12]], output=[1,2,3,4,8,12,11,10,9,5,6,7]","matrix=[[1]], output=[1]","matrix=[[1,2],[3,4]], output=[1,2,4,3]","matrix=[[1,2,3]], output=[1,2,3]","Google, Amazon, Microsoft","Medium","Array, Matrix","Use four pointers to traverse the matrix in spiral order."
55,Jump Game,"nums=[2,3,1,1,4], output=true","nums=[3,2,1,0,4], output=false","nums=[1], output=true","nums=[0], output=true","nums=[2,0], output=true","Google, Amazon","Medium","Array, Greedy","Track the maximum reachable index using a greedy approach."
56,Merge Intervals,"intervals=[[1,3],[2,6],[8,10],[15,18]], output=[[1,6],[8,10],[15,18]]","intervals=[[1,4],[4,5]], output=[[1,5]]","intervals=[[1,4]], output=[[1,4]]","intervals=[[1,4],[0,4]], output=[[0,4]]","intervals=[[1,4],[2,3]], output=[[1,4]]","Google, Amazon, Facebook","Medium","Array, Sorting","Sort intervals by start time and merge overlapping ones."
57,Insert Interval,"intervals=[[1,3],[6,9]], newInterval=[2,5], output=[[1,5],[6,9]]","intervals=[[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval=[4,8], output=[[1,2],[3,10],[12,16]]","intervals=[], newInterval=[5,7], output=[[5,7]]","intervals=[[1,5]], newInterval=[2,3], output=[[1,5]]","intervals=[[1,5]], newInterval=[6,8], output=[[1,5],[6,8]]","Google, Amazon","Medium","Array, Intervals","Insert and merge the new interval with existing ones."
59,Spiral Matrix II,"n=3, output=[[1,2,3],[8,9,4],[7,6,5]]","n=1, output=[[1]]","n=2, output=[[1,2],[4,3]]","n=4, output=[[1,2,3,4],[12,13,14,5],[11,16,15,6],[10,9,8,7]]","n=0, output=[]","Google, Amazon","Medium","Array, Matrix","Fill the matrix in a spiral pattern using four pointers."
60,Permutation Sequence,"n=3, k=3, output='213'","n=4, k=9, output='2314'","n=1, k=1, output='1'","n=2, k=1, output='12'","n=2, k=2, output='21'","Google, Amazon","Hard","Math, Backtracking","Use factorial-based indexing to find the k-th permutation."
61,Rotate List,"head=[1,2,3,4,5], k=2, output=[4,5,1,2,3]","head=[0,1,2], k=4, output=[2,0,1]","head=[1], k=0, output=[1]","head=[1,2], k=1, output=[2,1]","head=[1,2,3], k=3, output=[1,2,3]","Google, Amazon","Medium","Linked List","Rotate the list by finding the new head after k nodes."
62,Unique Paths,"m=3, n=7, output=28","m=3, n=2, output=3","m=1, n=1, output=1","m=2, n=2, output=2","m=3, n=3, output=6","Google, Amazon","Medium","Dynamic Programming","Use DP to count paths from top-left to bottom-right."
63,Unique Paths II,"obstacleGrid=[[0,0,0],[0,1,0],[0,0,0]], output=2","obstacleGrid=[[0,1],[0,0]], output=1","obstacleGrid=[[0]], output=1","obstacleGrid=[[1]], output=0","obstacleGrid=[[0,0],[1,1],[0,0]], output=0","Google, Amazon","Medium","Dynamic Programming","Use DP with obstacles blocking paths."
64,Minimum Path Sum,"grid=[[1,3,1],[1,5,1],[4,2,1]], output=7","grid=[[1,2],[1,1]], output=3","grid=[[1]], output=1","grid=[[1,2,3]], output=6","grid=[[1],[2],[3]], output=6","Google, Amazon","Medium","Dynamic Programming","Use DP to find the minimum path sum."
66,Plus One,"digits=[1,2,3], output=[1,2,4]","digits=[4,3,2,1], output=[4,3,2,2]","digits=[0], output=[1]","digits=[9], output=[1,0]","digits=[9,9], output=[1,0,0]","Google, Amazon","Easy","Array, Math","Handle carry-over from right to left."
67,Add Binary,"a='11', b='1', output='100'","a='1010', b='1011', output='10101'","a='0', b='0', output='0'","a='1', b='0', output='1'","a='1111', b='1111', output='11110'","Google, Amazon","Easy","String, Bit Manipulation","Simulate binary addition digit by digit."
69,Sqrt(x),"x=4, output=2","x=8, output=2","x=0, output=0","x=1, output=1","x=16, output=4","Google, Amazon","Easy","Math, Binary Search","Use binary search to find the square root."
70,Climbing Stairs,"n=2, output=2","n=3, output=3","n=1, output=1","n=4, output=5","n=0, output=1","Google, Amazon","Easy","Dynamic Programming","Use DP to compute ways to climb stairs."
71,Simplify Path,"path='/home/', output='/home'","path='/../', output='/'","path='/home//foo/', output='/home/foo'","path='/a/./b/../../c/', output='/c'","path='/a//b////c/d//././/..', output='/a/b/c'","Google, Amazon","Medium","String, Stack","Use a stack to process path components."
72,Edit Distance,"word1='horse', word2='ros', output=3","word1='intention', word2='execution', output=5","word1='', word2='a', output=1","word1='abc', word2='abc', output=0","word1='cat', word2='cut', output=1","Google, Amazon","Hard","Dynamic Programming","Use a DP table for minimum operations."
73,Set Matrix Zeroes,"matrix=[[1,1,1],[1,0,1],[1,1,1]], output=[[1,0,1],[0,0,0],[1,0,1]]","matrix=[[0,1,2,0],[3,4,5,2],[1,3,1,5]], output=[[0,0,0,0],[0,4,5,0],[0,3,1,0]]","matrix=[[1]], output=[[1]]","matrix=[[0]], output=[[0]]","matrix=[[1,0],[0,1]], output=[[0,0],[0,0]]","Google, Amazon","Medium","Array, Matrix","Use first row and column as markers for zeroes."
74,Search a 2D Matrix,"matrix=[[1,3,5,7],[10,11,16,20],[23,30,34,50]], target=3, output=true","matrix=[[1,3,5,7],[10,11,16,20],[23,30,34,50]], target=13, output=false","matrix=[[1]], target=1, output=true","matrix=[[1,2]], target=2, output=true","matrix=[[1],[3]], target=3, output=true","Google, Amazon, Microsoft","Medium","Array, Binary Search","Treat matrix as a sorted array for binary search."
75,Sort Colors,"nums=[2,0,2,1,1,0], output=[0,0,1,1,2,2]","nums=[2,0,1], output=[0,1,2]","nums=[0], output=[0]","nums=[1], output=[1]","nums=[2,2,0,0,1,1], output=[0,0,1,1,2,2]","Google, Amazon, Facebook","Medium","Array, Two Pointers, Sorting","Use three pointers to partition colors."
76,Minimum Window Substring,"s='ADOBECODEBANC', t='ABC', output='BANC'","s='a', t='a', output='a'","s='a', t='aa', output=''","s='ab', t='a', output='a'","s='ADOBEC', t='ABC', output='BEC'","Google, Amazon, Facebook","Hard","String, Sliding Window","Use a sliding window to find the smallest substring containing all characters."
77,Combinations,"n=4, k=2, output=[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]","n=1, k=1, output=[[1]]","n=2, k=1, output=[[1],[2]]","n=2, k=2, output=[[1,2]]","n=3, k=2, output=[[1,2],[1,3],[2,3]]","Google, Amazon","Medium","Backtracking","Use backtracking to generate all combinations."
78,Subsets,"nums=[1,2,3], output=[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]","nums=[0], output=[[],[0]]","nums=[1,2], output=[[],[1],[2],[1,2]]","nums=[1], output=[[],[1]]","nums=[2,3], output=[[],[2],[3],[2,3]]","Google, Amazon, Facebook","Medium","Backtracking, Bit Manipulation","Use backtracking or bit manipulation for all subsets."
79,Word Search,"board=[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word='ABCCED', output=true","board=[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word='SEE', output=true","board=[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word='ABCB', output=false","board=[['A']], word='A', output=true","board=[['A','B']], word='AB', output=true","Google, Amazon, Microsoft","Medium","Backtracking, Matrix","Use DFS with backtracking to find the word."
80,Remove Duplicates from Sorted Array II,"nums=[1,1,1,2,2,3], output=5","nums=[0,0,1,1,1,1,2,3,3], output=7","nums=[1,1], output=2","nums=[1], output=1","nums=[1,2,2], output=3","Google, Amazon","Medium","Array, Two Pointers","Allow at most two duplicates using two pointers."
81,Search in Rotated Sorted Array II,"nums=[2,5,6,0,0,1,2], target=0, output=true","nums=[2,5,6,0,0,1,2], target=3, output=false","nums=[1], target=1, output=true","nums=[1,1], target=1, output=true","nums=[1,3,1,1,1], target=3, output=true","Google, Amazon","Medium","Array, Binary Search","Handle duplicates with modified binary search."
82,Remove Duplicates from Sorted List II,"head=[1,2,3,3,4,4,5], output=[1,2,5]","head=[1,1,1,2,3], output=[2,3]","head=[1,1], output=[]","head=[1,2,2], output=[1]","head=[1], output=[1]","Google, Amazon","Medium","Linked List","Remove all nodes with duplicates using pointers."
83,Remove Duplicates from Sorted List,"head=[1,1,2], output=[1,2]","head=[1,1,2,3,3], output=[1,2,3]","head=[1], output=[1]","head=[1,1,1], output=[1]","head=[1,2], output=[1,2]","Google, Amazon","Easy","Linked List","Skip duplicates in a sorted list using a pointer."
84,Largest Rectangle in Histogram,"heights=[2,1,5,6,2,3], output=10","heights=[2,4], output=4","heights=[1], output=1","heights=[2,2], output=4","heights=[1,2,3], output=4","Google, Amazon","Hard","Array, Stack","Use a stack to compute areas of rectangles."
85,Maximal Rectangle,"matrix=[['1','0','1','0','0'],['1','0','1','1','1'],['1','1','1','1','1'],['1','0','0','1','0']], output=6","matrix=[['0']], output=0","matrix=[['1']], output=1","matrix=[['1','0'],['0','1']], output=1","matrix=[['1','1'],['1','1']], output=4","Google, Amazon","Hard","Dynamic Programming, Stack","Convert to histogram problem for each row."
88,Merge Sorted Array,"nums1=[1,2,3,0,0,0], m=3, nums2=[2,5,6], n=3, output=[1,2,2,3,5,6]","nums1=[1], m=1, nums2=[], n=0, output=[1]","nums1=[0], m=0, nums2=[1], n=1, output=[1]","nums1=[2,0], m=1, nums2=[1], n=1, output=[1,2]","nums1=[1,2,0,0], m=2, nums2=[3,4], n=2, output=[1,2,3,4]","Google, Amazon","Easy","Array, Two Pointers","Merge from the end to avoid overwriting."
89,Gray Code,"n=2, output=[0,1,3,2]","n=1, output=[0,1]","n=0, output=[0]","n=3, output=[0,1,3,2,6,7,5,4]","n=4, output=(16 numbers in Gray code sequence)","Google, Amazon","Medium","Backtracking, Bit Manipulation","Generate sequence using bit manipulation or mirroring."
90,Subsets II,"nums=[1,2,2], output=[[],[1],[1,2],[1,2,2],[2],[2,2]]","nums=[0], output=[[],[0]]","nums=[1,1], output=[[],[1],[1,1]]","nums=[1], output=[[],[1]]","nums=[2,2,2], output=[[],[2],[2,2],[2,2,2]]","Google, Amazon","Medium","Backtracking","Use backtracking with deduplication for subsets."
91,Decode Ways,"s='12', output=2","s='226', output=3","s='06', output=0","s='1', output=1","s='111', output=3","Google, Amazon","Medium","Dynamic Programming","Use DP to count valid decodings."
92,Reverse Linked List II,"head=[1,2,3,4,5], left=2, right=4, output=[1,4,3,2,5]","head=[5], left=1, right=1, output=[5]","head=[1,2], left=1, right=2, output=[2,1]","head=[1,2,3], left=1, right=3, output=[3,2,1]","head=[1,2,3,4], left=2, right=3, output=[1,3,2,4]","Google, Amazon","Medium","Linked List","Reverse the sublist between left and right positions."
94,Binary Tree Inorder Traversal,"root=[1,null,2,3], output=[1,3,2]","root=[], output=[]","root=[1], output=[1]","root=[1,2], output=[2,1]","root=[1,null,2], output=[1,2]","Google, Amazon, Microsoft","Medium","Tree, DFS","Use recursive or iterative inorder traversal."
95,Unique Binary Search Trees II,"n=3, output=[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]","n=1, output=[[1]]","n=2, output=[[1,null,2],[2,1]]","n=0, output=[]","n=4, output=(14 unique BSTs)","Google, Amazon","Medium","Dynamic Programming, Tree","Generate all unique BSTs using recursion."
96,Unique Binary Search Trees,"n=3, output=5","n=1, output=1","n=2, output=2","n=0, output=1","n=4, output=14","Google, Amazon","Medium","Dynamic Programming, Math","Use Catalan numbers or DP for unique BSTs."
97,Interleaving String,"s1='aabcc', s2='dbbca', s3='aadbbcbcac', output=true","s1='aabcc', s2='dbbca', s3='aadbbbaccc', output=false","s1='', s2='', s3='', output=true","s1='abc', s2='def', s3='adbecf', output=true","s1='a', s2='b', s3='ab', output=true","Google, Amazon","Hard","Dynamic Programming","Use DP to check if s3 is an interleaving of s1 and s2."
98,Validate Binary Search Tree,"root=[2,1,3], output=true","root=[5,1,4,null,null,3,6], output=false","root=[1], output=true","root=[5,4,null,3], output=false","root=[3,1,5], output=true","Google, Amazon, Microsoft","Medium","Tree, DFS","Check if each nodeâ€™s value is within valid BST range."
99,Recover Binary Search Tree,"root=[1,3,null,null,2], output=[3,1,null,null,2]","root=[3,1,4,null,null,2], output=[2,1,4,null,null,3]","root=[1], output=[1]","root=[2,1,3], output=[2,1,3]","root=[4,2,6,1,3], output=[4,3,6,1,2]","Google, Amazon","Medium","Tree, DFS","Find and swap the two nodes that are out of order."
100,Same Tree,"p=[1,2,3], q=[1,2,3], output=true","p=[1,2], q=[1,null,2], output=false","p=[1,2,1], q=[1,1,2], output=false","p=[1], q=[1], output=true","p=[], q=[], output=true","Google, Amazon","Easy","Tree, DFS","Compare trees recursively or iteratively."