id,question,tc1,tc2,tc3,tc4,tc5,company,difficulty,category,hint
100,Same Tree,"p=[1,2,3], q=[1,2,3], output=true","p=[1,2], q=[1,null,2], output=false","p=[1,2,1], q=[1,1,2], output=false","p=[1], q=[1], output=true","p=[], q=[], output=true","Google, Amazon","Easy","Tree, DFS","Compare trees recursively or iteratively."
101,Symmetric Tree,"root=[1,2,2,3,4,4,3], output=true","root=[1,2,2,null,3,null,3], output=false","root=[1], output=true","root=[1,2,2], output=true","root=[1,2,3], output=false","Google, Amazon","Easy","Tree, DFS","Check if left and right subtrees are mirror images."
102,Binary Tree Level Order Traversal,"root=[3,9,20,null,null,15,7], output=[[3],[9,20],[15,7]]","root=[1], output=[[1]]","root=[], output=[]","root=[1,2,3], output=[[1],[2,3]]","root=[1,null,2], output=[[1],[2]]","Google, Amazon, Microsoft","Medium","Tree, BFS","Use BFS to traverse level by level."
103,Binary Tree Zigzag Level Order Traversal,"root=[3,9,20,null,null,15,7], output=[[3],[20,9],[15,7]]","root=[1], output=[[1]]","root=[], output=[]","root=[1,2,3], output=[[1],[3,2]]","root=[1,null,2,3], output=[[1],[2],[3]]","Google, Amazon","Medium","Tree, BFS","Use BFS with a flag to reverse alternate levels."
104,Maximum Depth of Binary Tree,"root=[3,9,20,null,null,15,7], output=3","root=[1,null,2], output=2","root=[1], output=1","root=[], output=0","root=[1,2,3,4,null,null,5], output=3","Google, Amazon","Easy","Tree, DFS","Use DFS or BFS to find the maximum depth."
105,Construct Binary Tree from Preorder and Inorder Traversal,"preorder=[3,9,20,15,7], inorder=[9,3,15,20,7], output=[3,9,20,null,null,15,7]","preorder=[1], inorder=[1], output=[1]","preorder=[1,2], inorder=[2,1], output=[1,2]","preorder=[1,2,3], inorder=[2,1,3], output=[1,2,3]","preorder=[3,1,2], inorder=[1,3,2], output=[3,1,2]","Google, Amazon","Medium","Tree, DFS","Use preorder for root and inorder to split subtrees."
106,Construct Binary Tree from Inorder and Postorder Traversal,"inorder=[9,3,15,20,7], postorder=[9,15,7,20,3], output=[i3,9,20,null,null,15,7]","inorder=[1], postorder=[1], output=[1]","inorder=[2,1], postorder=[2,1], output=[1,2]","inorder=[2,1,3], postorder=[2,3,1], output=[1,2,3]","inorder=[1,3,2], postorder=[1,2,3], output=[3,1,2]","Google, Amazon","Medium","Tree, DFS","Use postorder for root and inorder to split subtrees."
107,Binary Tree Level Order Traversal II,"root=[3,9,20,null,null,15,7], output=[[15,7],[9,20],[3]]","root=[1], output=[[1]]","root=[], output=[]","root=[1,2,3], output=[[2,3],[1]]","root=[1,null,2], output=[[2],[1]]","Google, Amazon","Medium","Tree, BFS","Use BFS and reverse the result."
108,Convert Sorted Array to Binary Search Tree,"nums=[-10,-3,0,5,9], output=[0,-3,9,-10,null,5]","nums=[1,3], output=[3,1]","nums=[1], output=[1]","nums=[1,2,3], output=[2,1,3]","nums=[0], output=[0]","Google, Amazon","Easy","Tree, DFS","Use middle element as root to balance the BST."
109,Convert Sorted List to Binary Search Tree,"head=[-10,-3,0,5,9], output=[0,-3,9,-10,null,5]","head=[], output=[]","head=[0], output=[0]","head=[1,3], output=[3,1]","head=[1,2,3], output=[2,1,3]","Google, Amazon","Medium","Linked List, Tree","Find the middle of the list for the root."
110,Balanced Binary Tree,"root=[3,9,20,null,null,15,7], output=true","root=[1,2,2,3,3,null,null,4,4], output=false","root=[1], output=true","root=[1,2], output=true","root=[1,null,2], output=true","Google, Amazon","Easy","Tree, DFS","Check if subtree height difference is at most 1."
111,Minimum Depth of Binary Tree,"root=[3,9,20,null,null,15,7], output=2","root=[2,null,3,null,4,null,5,null,6], output=5","root=[1], output=1","root=[1,2], output=2","root=[1,null,2], output=2","Google, Amazon","Easy","Tree, DFS, BFS","Use BFS for the shortest path to a leaf."
112,Path Sum,"root=[5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum=22, output=true","root=[1,2,3], targetSum=5, output=false","root=[1], targetSum=1, output=true","root=[1,2], targetSum=3, output=true","root=[], targetSum=0, output=false","Google, Amazon","Easy","Tree, DFS","Check if any root-to-leaf path sums to target."
113,Path Sum II,"root=[5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum=22, output=[[5,4,11,2],[5,8,4,5]]","root=[1,2,3], targetSum=5, output=[]","root=[1], targetSum=1, output=[[1]]","root=[1,2], targetSum=3, output=[[1,2]]","root=[1,null,2], targetSum=3, output=[[1,2]]","Google, Amazon","Medium","Tree, DFS","Use DFS to collect all paths summing to target."
114,Flatten Binary Tree to Linked List,"root=[1,2,5,3,4,null,6], output=[1,null,2,null,3,null,4,null,5,null,6]","root=[1], output=[1]","root=[], output=[]","root=[1,2], output=[1,null,2]","root=[1,null,2], output=[1,null,2]","Google, Amazon","Medium","Tree, DFS","Flatten the tree in-place using preorder traversal."
116,Populating Next Right Pointers in Each Node,"root=[1,2,3,4,5,6,7], output=[1,#,2,3,#,4,5,6,7,#]","root=[1], output=[1,#]","root=[], output=[]","root=[1,2,3], output=[1,#,2,3,#]","root=[1,null,2], output=[1,#,2,#]","Google, Amazon","Medium","Tree, BFS","Connect nodes at the same level using next pointers."
117,Populating Next Right Pointers in Each Node II,"root=[1,2,3,4,5,null,7], output=[1,#,2,3,#,4,5,7,#]","root=[1], output=[1,#]","root=[], output=[]","root=[1,2,3], output=[1,#,2,3,#]","root=[1,null,2], output=[1,#,2,#]","Google, Amazon","Medium","Tree, BFS","Connect nodes at the same level in a non-perfect tree."
118,Pascal's Triangle,"numRows=5, output=[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]","numRows=1, output=[[1]]","numRows=2, output=[[1],[1,1]]","numRows=3, output=[[1],[1,1],[1,2,1]]","numRows=0, output=[]","Google, Amazon","Easy","Array","Generate rows using previous row’s values."
119,Pascal's Triangle II,"rowIndex=3, output=[1,3,3,1]","rowIndex=0, output=[1]","rowIndex=1, output=[1,1]","rowIndex=2, output=[1,2,1]","rowIndex=4, output=[1,4,6,4,1]","Google, Amazon","Easy","Array","Compute the kth row using only O(k) space."
120,Triangle,"triangle=[[2],[3,4],[6,5,7],[4,1,8,3]], output=11","triangle=[[1]], output=1","triangle=[[1],[2,3]], output=3","triangle=[[1],[2,3],[4,5,6]], output=8","triangle=[[-10]], output=-10","Google, Amazon","Medium","Dynamic Programming","Use DP to find the minimum path sum."
121,Best Time to Buy and Sell Stock,"prices=[7,1,5,3,6,4], output=5","prices=[7,6,4,3,1], output=0","prices=[1], output=0","prices=[1,2], output=1","prices=[2,1,4], output=3","Google, Amazon, Facebook","Easy","Array, Dynamic Programming","Track minimum price and maximum profit."
122,Best Time to Buy and Sell Stock II,"prices=[7,1,5,3,6,4], output=7","prices=[1,2,3,4,5], output=4","prices=[7,6,4,3,1], output=0","prices=[1], output=0","prices=[2,1,2,0,1], output=2","Google, Amazon","Medium","Array, Greedy","Sum all positive price differences."
124,Binary Tree Maximum Path Sum,"root=[1,2,3], output=6","root=[-10,9,20,null,null,15,7], output=42","root=[1], output=1","root=[-1,-2,-3], output=-1","root=[2,-1], output=2","Google, Amazon","Hard","Tree, DFS","Track maximum path sum through each node."
125,Valid Palindrome,"s='A man, a plan, a canal: Panama', output=true","s='race a car', output=false","s=' ', output=true","s='ab', output=false","s='a', output=true","Google, Amazon","Easy","String, Two Pointers","Ignore non-alphanumeric characters and compare."
126,Word Ladder II,"beginWord='hit', endWord='cog', wordList=['hot','dot','dog','lot','log','cog'], output=[['hit','hot','dot','dog','cog'],['hit','hot','lot','log','cog']]","beginWord='hit', endWord='cog', wordList=['hot','dot','dog'], output=[]","beginWord='a', endWord='c', wordList=['a','b','c'], output=[['a','b','c']]","beginWord='red', endWord='tax', wordList=['ted','tex','red','tax'], output=[['red','ted','tex','tax']]","beginWord='hot', endWord='dog', wordList=['hot','dog'], output=[]","Google, Amazon","Hard","BFS, Backtracking","Use BFS to find shortest paths and backtrack for all paths."
127,Word Ladder,"beginWord='hit', endWord='cog', wordList=['hot','dot','dog','lot','log','cog'], output=5","beginWord='hit', endWord='cog', wordList=['hot','dot','dog'], output=0","beginWord='a', endWord='c', wordList=['a','b','c'], output=3","beginWord='red', endWord='tax', wordList=['ted','tex','red','tax'], output=4","beginWord='hot', endWord='dog', wordList=['hot','dog'], output=0","Google, Amazon","Hard","BFS","Use BFS to find the shortest transformation sequence."
128,Longest Consecutive Sequence,"nums=[100,4,200,1,3,2], output=4","nums=[0,3,7,2,5,8,4,6,0,1], output=9","nums=[1], output=1","nums=[1,2], output=2","nums=[1,3], output=1","Google, Amazon","Medium","Array, Hash Table","Use a hash set to find the longest consecutive sequence."
129,Sum Root to Leaf Numbers,"root=[1,2,3], output=25","root=[4,9,0,5,1], output=1026","root=[1], output=1","root=[1,2], output=12","root=[4,9], output=49","Google, Amazon","Medium","Tree, DFS","Sum numbers formed by root-to-leaf paths."
130,Surrounded Regions,"board=[['X','X','X','X'],['X','O','O','X'],['X','X','O','X'],['X','O','X','X']], output=[['X','X','X','X'],['X','X','X','X'],['X','X','X','X'],['X','O','X','X']]","board=[['X']], output=[['X']]","board=[['O']], output=[['O']]","board=[['X','O'],['O','X']], output=[['X','O'],['O','X']]","board=[['O','O'],['O','O']], output=[['O','O']]","Google, Amazon","Medium","DFS, Union Find","Mark ‘O’s connected to the border using DFS."
133,Clone Graph,"node=1->[[2,4],[1,3],[2,4],[1,3]], output=cloned graph","node=1->[], output=cloned graph","node=1->[[2],[1]], output=cloned graph","node=1->[[2,3],[1,3],[1,2]], output=cloned graph","node=1->[[2],[1]], output=cloned graph","Google, Amazon","Medium","Graph, DFS, BFS","Use DFS or BFS to clone the graph with a hash map."
134,Gas Station,"gas=[1,2,3,4,5], cost=[3,4,5,1,2], output=3","gas=[2,3,4], cost=[3,4,3], output=-1","gas=[1], cost=[1], output=0","gas=[2,2], cost=[2,2], output=0","gas=[5,1,2,3,4], cost=[4,1,1,1,1], output=1","Google, Amazon","Medium","Array, Greedy","Check if total gas is sufficient and find starting point."
135,Candy,"ratings=[1,0,2], output=5","ratings=[1,2,2], output=4","ratings=[1], output=1","ratings=[1,2], output=3","ratings=[2,1], output=3","Google, Amazon","Hard","Array, Greedy","Assign candies based on ratings with two passes."
136,Single Number,"nums=[2,2,1], output=1","nums=[4,1,2,1,2], output=4","nums=[1], output=1","nums=[1,1,2], output=2","nums=[3,3,4], output=4","Google, Amazon","Easy","Array, Bit Manipulation","Use XOR to find the single number."
137,Single Number II,"nums=[2,2,3,2], output=3","nums=[0,1,0,1,0,1,99], output=99","nums=[1], output=1","nums=[2,2,2,3], output=3","nums=[1,1,1,4], output=4","Google, Amazon","Medium","Array, Bit Manipulation","Use bit manipulation to track numbers appearing once."
138,Copy List with Random Pointer,"head=[1,2,3,random=3,1,null], output=copied list","head=[1,null], output=copied list","head=[], output=[]","head=[1,1,random=1], output=copied list","head=[2,3,random=3], output=copied list","Google, Amazon","Medium","Linked List","Interleave nodes to copy with random pointers."
139,Word Break,"s='leetcode', wordDict=['leet','code'], output=true","s='applepenapple', wordDict=['apple','pen'], output=true","s='catsandog', wordDict=['cats','dog','sand','and','cat'], output=false","s='a', wordDict=['a'], output=true","s='ab', wordDict=['a','b'], output=true","Google, Amazon","Medium","Dynamic Programming","Use DP to check if string can be segmented."
140,Word Break II,"s='catsanddog', wordDict=['cat','cats','and','sand','dog'], output=['cats and dog','cat sand dog']","s='pineapplepenapple', wordDict=['apple','pen','applepen','pine','pineapple'], output=['pine apple pen apple','pineapple pen apple','pine applepen apple']","s='catsandog', wordDict=['cats','dog','sand','and','cat'], output=[]","s='a', wordDict=['a'], output=['a']","s='ab', wordDict=['a','b'], output=['a b']","Google, Amazon","Hard","Dynamic Programming, Backtracking","Use backtracking or DP to find all segmentations."
141,Linked List Cycle,"head=[3,2,0,-4], pos=1, output=true","head=[1,2], pos=0, output=true","head=[1], pos=-1, output=false","head=[1,2,3], pos=-1, output=false","head=[1,2,3,4], pos=2, output=true","Google, Amazon","Easy","Linked List, Two Pointers","Use Floyd’s cycle detection algorithm."
142,Linked List Cycle II,"head=[3,2,0,-4], pos=1, output=2","head=[1,2], pos=0, output=1","head=[1], pos=-1, output=null","head=[1,2,3], pos=-1, output=null","head=[1,2,3,4], pos=2, output=3","Google, Amazon","Medium","Linked List, Two Pointers","Use Floyd’s algorithm to find the cycle’s start."
143,Reorder List,"head=[1,2,3,4], output=[1,4,2,3]","head=[1,2,3,4,5], output=[1,5,2,4,3]","head=[1], output=[1]","head=[1,2], output=[1,2]","head=[1,2,3], output=[1,3,2]","Google, Amazon","Medium","Linked List","Find middle, reverse second half, and merge."
144,Binary Tree Preorder Traversal,"root=[1,null,2,3], output=[1,2,3]","root=[], output=[]","root=[1], output=[1]","root=[1,2], output=[1,2]","root=[1,null,2], output=[1,2]","Google, Amazon","Medium","Tree, DFS","Use recursive or iterative preorder traversal."
145,Binary Tree Postorder Traversal,"root=[1,null,2,3], output=[3,2,1]","root=[], output=[]","root=[1], output=[1]","root=[1,2], output=[2,1]","root=[1,null,2], output=[2,1]","Google, Amazon","Medium","Tree, DFS","Use recursive or iterative postorder traversal."
146,LRU Cache,"ops=['LRUCache','put','put','get','put','get','put','get','get','get'], args=[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]], output=[null,null,null,1,null,-1,null,-1,3,4]","ops=['LRUCache','put','get'], args=[[1],[1,1],[1]], output=[null,null,1]","ops=['LRUCache','get'], args=[[1],[1]], output=[null,-1]","ops=['LRUCache','put','put','get'], args=[[1],[1,1],[2,2],[1]], output=[null,null,null,1]","ops=['LRUCache','put','put','get'], args=[[2],[1,1],[2,2],[3]], output=[null,null,null,-1]","Google, Amazon","Medium","Design, Hash Table, Linked List","Use a hash map and doubly linked list for O(1) operations."
147,Insertion Sort List,"head=[4,2,1,3], output=[1,2,3,4]","head=[-1,5,3,4,0], output=[-1,0,3,4,5]","head=[1], output=[1]","head=[2,1], output=[1,2]","head=[1,1,1], output=[1,1,1]","Google, Amazon","Medium","Linked List, Sorting","Implement insertion sort on a linked list."
148,Sort List,"head=[4,2,1,3], output=[1,2,3,4]","head=[-1,5,3,4,0], output=[-1,0,3,4,5]","head=[1], output=[1]","head=[2,1], output=[1,2]","head=[1,1,1], output=[1,1,1]","Google, Amazon","Medium","Linked List, Sorting","Use merge sort for O(n log n) time."
149,Max Points on a Line,"points=[[1,1],[2,2],[3,3]], output=3","points=[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]], output=4","points=[[1,1]], output=1","points=[[1,1],[2,2]], output=2","points=[[0,0],[1,1],[0,0]], output=3","Google, Amazon","Hard","Math, Geometry","Calculate slopes to find collinear points."
150,Evaluate Reverse Polish Notation,"tokens=['2','1','+','3','*'], output=9","tokens=['4','13','5','/','+'], output=6","tokens=['10','6','9','3','+','-11','*','/','*','17','+','5','+'], output=22","tokens=['1'], output=1","tokens=['2','3','*'], output=6","Google, Amazon","Medium","Stack","Use a stack to evaluate postfix expressions."