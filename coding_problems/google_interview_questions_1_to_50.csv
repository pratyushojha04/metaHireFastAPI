id,question,tc1,tc2,tc3,tc4,tc5,company,difficulty,category,hint
1,Two Sum,"nums=[2,7,11,15], target=9, output=[0,1]","nums=[3,2,4], target=6, output=[1,2]","nums=[3,3], target=6, output=[0,1]","nums=[1,2,3,4], target=7, output=[2,3]","nums=[0,4,3,0], target=0, output=[0,3]","Google, Amazon, Facebook, Microsoft, Apple","Easy","Array, Hash Table","Use a hash map to store numbers and their indices."
3,Longest Substring Without Repeating Characters,"s='abcabcbb', output=3","s='bbbbb', output=1","s='pwwkew', output=3","s='', output=0","s='dvdf', output=3","Google, Amazon, Facebook, Microsoft","Medium","String, Sliding Window","Use a sliding window with a hash set to track unique characters."
4,Median of Two Sorted Arrays,"nums1=[1,3], nums2=[2], output=2.0","nums1=[1,2], nums2=[3,4], output=2.5","nums1=[0,0], nums2=[0,0], output=0.0","nums1=[], nums2=[1], output=1.0","nums1=[2], nums2=[], output=2.0","Google, Amazon, Microsoft","Hard","Array, Binary Search, Divide and Conquer","Use binary search to partition arrays."
5,Longest Palindromic Substring,"s='babad', output='bab'","s='cbbd', output='bb'","s='a', output='a'","s='racecar', output='racecar'","s='aaaa', output='aaaa'","Google, Amazon, Facebook","Medium","String, Dynamic Programming","Expand around the center to find palindromes."
6,ZigZag Conversion,"s='PAYPALISHIRING', numRows=3, output='PAHNAPLSIIGYIR'","s='PAYPALISHIRING', numRows=4, output='PINALSIGYAHRPI'","s='A', numRows=1, output='A'","s='AB', numRows=2, output='AB'","s='ABC', numRows=3, output='ABC'","Google, Amazon","Medium","String","Simulate zigzag by tracking row indices."
8,String to Integer (atoi),"s='42', output=42","s='-42', output=-42","s='4193 with words', output=4193","s='words and 987', output=0","s='-91283472332', output=-2147483648","Google, Amazon, Microsoft","Medium","String","Handle signs, whitespace, and overflow."
11,Container With Most Water,"height=[1,8,6,2,5,4,8,3,7], output=49","height=[1,1], output=1","height=[4,3,2,1,4], output=16","height=[1,2,1], output=2","height=[2,3,4,5], output=6","Google, Amazon, Facebook","Medium","Array, Two Pointers","Use two pointers to maximize area."
15,3Sum,"nums=[-1,0,1,2,-1,-4], output=[[-1,-1,2],[-1,0,1]]","nums=[0,0,0], output=[[0,0,0]]","nums=[1,2,3,4], output=[]","nums=[-2,0,1,1], output=[[-2,0,2]]","nums=[-1,0,1], output=[[-1,0,1]]","Google, Amazon, Facebook","Medium","Array, Two Pointers","Sort and use two pointers to find triplets."
17,Letter Combinations of a Phone Number,"digits='23', output=['ad','ae','af','bd','be','bf','cd','ce','cf']","digits='', output=[]","digits='2', output=['a','b','c']","digits='7', output=['p','q','r','s']","digits='89', output=['tw','tx','ty','tz','uw','ux','uy','uz','vw','vx','vy','vz']","Google, Amazon","Medium","Backtracking","Use backtracking to generate all combinations."
19,Remove Nth Node From End of List,"head=[1,2,3,4,5], n=2, output=[1,2,3,5]","head=[1], n=1, output=[]","head=[1,2], n=1, output=[1]","head=[1,2,3], n=3, output=[2,3]","head=[1,2,3,4], n=1, output=[1,2,3]","Google, Amazon, Facebook","Medium","Linked List, Two Pointers","Use two pointers to find the nth node from the end."
20,Valid Parentheses,"s='()', output=true","s='()[]{}', output=true","s='(]', output=false","s='([)]', output=false","s='{[]}', output=true","Google, Amazon, Facebook","Easy","String, Stack","Use a stack to match opening and closing brackets."
21,Merge Two Sorted Lists,"list1=[1,2,4], list2=[1,3,4], output=[1,1,2,3,4,4]","list1=[], list2=[0], output=[0]","list1=[1], list2=[], output=[1]","list1=[1,2], list2=[3], output=[1,2,3]","list1=[2], list2=[1], output=[1,2]","Google, Amazon","Easy","Linked List","Merge lists by comparing node values."
22,Generate Parentheses,"n=3, output=['((()))','(()())','(())()','()(()','()()()']","n=1, output=['()']","n=2, output=['(())','()()']","n=4, output=(14 valid combinations)","n=0, output=[]","Google, Amazon","Medium","Backtracking","Use backtracking to generate valid parentheses."
23,Merge k Sorted Lists,"lists=[[1,4,5],[1,3,4],[2,6]], output=[1,1,2,3,4,4,5,6]","lists=[], output=[]","lists=[[]], output=[]","lists=[[1]], output=[1]","lists=[[1,2],[3,4]], output=[1,2,3,4]","Google, Amazon, Facebook, Microsoft","Hard","Linked List, Divide and Conquer, Heap","Use a min-heap to merge lists efficiently."
24,Swap Nodes in Pairs,"head=[1,2,3,4], output=[2,1,4,3]","head=[1], output=[1]","head=[1,2], output=[2,1]","head=[1,2,3], output=[2,1,3]","head=[1,2,3,4,5], output=[2,1,4,3,5]","Google, Amazon","Medium","Linked List","Swap adjacent nodes by adjusting pointers."
26,Remove Duplicates from Sorted Array,"nums=[1,1,2], output=2","nums=[0,0,1,1,1,2,2,3,3,4], output=5","nums=[1], output=1","nums=[1,1,1], output=1","nums=[1,2,3], output=3","Google, Amazon, Microsoft","Easy","Array, Two Pointers","Use two pointers to keep unique elements."
28,Find the Index of the First Occurrence in a String,"haystack='sadbutsad', needle='sad', output=0","haystack='leetcode', needle='leeto', output=-1","haystack='hello', needle='ll', output=2","haystack='aaaaa', needle='bba', output=-1","haystack='abc', needle='c', output=2","Google, Amazon","Easy","String","Use string matching or KMP algorithm."
29,Divide Two Integers,"dividend=10, divisor=3, output=3","dividend=7, divisor=-3, output=-2","dividend=0, divisor=1, output=0","dividend=1, divisor=1, output=1","dividend=-2147483648, divisor=-1, output=2147483647","Google, Amazon","Medium","Math, Bit Manipulation","Use bit manipulation for division without using / or %."
31,Next Permutation,"nums=[1,2,3], output=[1,3,2]","nums=[3,2,1], output=[1,2,3]","nums=[1,1,5], output=[1,5,1]","nums=[1], output=[1]","nums=[1,2], output=[2,1]","Google, Amazon","Medium","Array","Find the next lexicographically greater permutation."
33,Search in Rotated Sorted Array,"nums=[4,5,6,7,0,1,2], target=0, output=4","nums=[4,5,6,7,0,1,2], target=3, output=-1","nums=[1], target=0, output=-1","nums=[1,3], target=3, output=1","nums=[5,1,3], target=3, output=2","Google, Amazon, Facebook","Medium","Array, Binary Search","Use modified binary search for rotated array."
34,Find First and Last Position of Element in Sorted Array,"nums=[5,7,7,8,8,10], target=8, output=[3,4]","nums=[5,7,7,8,8,10], target=6, output=[-1,-1]","nums=[], target=0, output=[-1,-1]","nums=[1], target=1, output=[0,0]","nums=[2,2], target=2, output=[0,1]","Google, Amazon, Microsoft","Medium","Array, Binary Search","Use two binary searches for boundaries."
35,Search Insert Position,"nums=[1,3,5,6], target=5, output=2","nums=[1,3,5,6], target=2, output=1","nums=[1,3,5,6], target=7, output=4","nums=[1,3,5,6], target=0, output=0","nums=[1], target=1, output=0","Google, Amazon","Easy","Array, Binary Search","Use binary search to find insertion point."
36,Valid Sudoku,"board=[['5','3','.','.','7','.','.','.','.'],['6','.','.','1','9','5','.','.','.'],['.','9','8','.','.','.','.','6','.'],['8','.','.','.','6','.','.','.','3'],['4','.','.','8','.','3','.','.','1'],['7','.','.','.','2','.','.','.','6'],['.','6','.','.','.','.','2','8','.'],['.','.','.','4','1','9','.','.','5'],['.','.','.','.','8','.','.','7','9']], output=true","board=[['8','3','.','.','7','.','.','.','.'],['6','.','.','1','9','5','.','.','.'],['.','9','8','.','.','.','.','6','.'],['8','.','.','.','6','.','.','.','3'],['4','.','.','8','.','3','.','.','1'],['7','.','.','.','2','.','.','.','6'],['.','6','.','.','.','.','2','8','.'],['.','.','.','4','1','9','.','.','5'],['.','.','.','.','8','.','.','7','9']], output=false","board=[['1','.','.'],['.','2','.'],['.','.','3']], output=true","board=[['1','1','.'],['.','2','.'],['.','.','3']], output=false","board=[['.','.','.'],['.','.','.'],['.','.','.']], output=true","Google, Amazon","Medium","Array, Hash Table","Check rows, columns, and 3x3 sub-boxes for duplicates."
38,Count and Say,"n=1, output='1'","n=2, output='11'","n=3, output='21'","n=4, output='1211'","n=5, output='111221'","Google, Amazon","Medium","String","Count consecutive digits to generate the next sequence."
39,Combination Sum,"candidates=[2,3,6,7], target=7, output=[[2,2,3],[7]]","candidates=[2,3,5], target=8, output=[[2,2,2,2],[2,3,3],[3,5]]","candidates=[2], target=1, output=[]","candidates=[1], target=1, output=[[1]]","candidates=[1,2], target=4, output=[[1,1,1,1],[1,1,2],[2,2]]","Google, Amazon","Medium","Backtracking","Use backtracking to find all combinations summing to target."
40,Combination Sum II,"candidates=[10,1,2,7,6,1,5], target=8, output=[[1,1,6],[1,2,5],[1,7],[2,6]]","candidates=[2,5,2,1,2], target=5, output=[[1,2,2],[5]]","candidates=[1], target=1, output=[[1]]","candidates=[1,2], target=4, output=[[2,2]]","candidates=[2], target=1, output=[]","Google, Amazon","Medium","Backtracking","Use backtracking with deduplication for unique combinations."
41,First Missing Positive,"nums=[1,2,0], output=3","nums=[3,4,-1,1], output=2","nums=[7,8,9,11,12], output=1","nums=[1], output=2","nums=[1,2,3], output=4","Google, Amazon, Microsoft","Hard","Array","Use array as a hash table by marking indices."
42,Trapping Rain Water,"height=[0,1,0,2,1,0,1,3,2,1,2,1], output=6","height=[4,2,0,3,2,5], output=9","height=[1], output=0","height=[1,2], output=0","height=[2,0,2], output=2","Google, Amazon","Hard","Array, Two Pointers, Stack","Use two pointers or stack to compute trapped water."
43,Multiply Strings,"num1='2', num2='3', output='6'","num1='123', num2='456', output='56088'","num1='0', num2='0', output='0'","num1='9', num2='9', output='81'","num1='123', num2='0', output='0'","Google, Amazon","Medium","String, Math","Simulate multiplication digit by digit."
44,Wildcard Matching,"s='aa', p='a', output=false","s='aa', p='*', output=true","s='cb', p='?a', output=false","s='adceb', p='*a*b', output=true","s='acdcb', p='a*c?b', output=false","Google, Amazon","Hard","Dynamic Programming, String","Use DP to match string with wildcard pattern."
45,Jump Game II,"nums=[2,3,1,1,4], output=2","nums=[2,3,0,1,4], output=2","nums=[1], output=0","nums=[1,2], output=1","nums=[2,1], output=1","Google, Amazon","Medium","Array, Greedy","Use greedy approach to minimize jumps."
46,Permutations,"nums=[1,2,3], output=[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]","nums=[0,1], output=[[0,1],[1,0]]","nums=[1], output=[[1]]","nums=[1,2], output=[[1,2],[2,1]]","nums=[1,2,3,4], output=(24 permutations)","Google, Amazon, Facebook","Medium","Backtracking","Use backtracking to generate all permutations."
48,Rotate Image,"matrix=[[1,2,3],[4,5,6],[7,8,9]], output=[[7,4,1],[8,5,2],[9,6,3]]","matrix=[[1]], output=[[1]]","matrix=[[1,2],[3,4]], output=[[3,1],[4,2]]","matrix=[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], output=[[13,9,5,1],[14,10,6,2],[15,11,7,3],[16,12,8,4]]","matrix=[[1,2],[3,4]], output=[[3,1],[4,2]]","Google, Amazon","Medium","Array, Matrix","Rotate matrix in-place using transpose and reverse."
49,Group Anagrams,"strs=['eat','tea','tan','ate','nat','bat'], output=[['eat','tea','ate'],['tan','nat'],['bat']]","strs=[''], output=[['']]","strs=['a'], output=[['a']]","strs=['ab','ba'], output=[['ab','ba']]","strs=['abc','cba','bac'], output=[['abc','cba','bac']]","Google, Amazon","Medium","String, Hash Table","Group strings by sorted characters or character frequency."
50,Pow(x, n),"x=2.0, n=10, output=1024.0","x=2.1, n=3, output=9.261","x=2.0, n=-2, output=0.25","x=1.0, n=0, output=1.0","x=2.0, n=1, output=2.0","Google, Amazon, Facebook","Medium","Math, Binary Exponentiation","Use binary exponentiation for efficient power computation."